
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model flyway_schema_history
 * 
 */
export type flyway_schema_history = $Result.DefaultSelection<Prisma.$flyway_schema_historyPayload>
/**
 * Model users
 * 
 */
export type users = $Result.DefaultSelection<Prisma.$usersPayload>
/**
 * Model course_trainees
 * 
 */
export type course_trainees = $Result.DefaultSelection<Prisma.$course_traineesPayload>
/**
 * Model courses
 * 
 */
export type courses = $Result.DefaultSelection<Prisma.$coursesPayload>
/**
 * Model modules
 * 
 */
export type modules = $Result.DefaultSelection<Prisma.$modulesPayload>
/**
 * Model progress
 * 
 */
export type progress = $Result.DefaultSelection<Prisma.$progressPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Flyway_schema_histories
 * const flyway_schema_histories = await prisma.flyway_schema_history.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Flyway_schema_histories
   * const flyway_schema_histories = await prisma.flyway_schema_history.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.flyway_schema_history`: Exposes CRUD operations for the **flyway_schema_history** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Flyway_schema_histories
    * const flyway_schema_histories = await prisma.flyway_schema_history.findMany()
    * ```
    */
  get flyway_schema_history(): Prisma.flyway_schema_historyDelegate<ExtArgs>;

  /**
   * `prisma.users`: Exposes CRUD operations for the **users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.usersDelegate<ExtArgs>;

  /**
   * `prisma.course_trainees`: Exposes CRUD operations for the **course_trainees** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Course_trainees
    * const course_trainees = await prisma.course_trainees.findMany()
    * ```
    */
  get course_trainees(): Prisma.course_traineesDelegate<ExtArgs>;

  /**
   * `prisma.courses`: Exposes CRUD operations for the **courses** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Courses
    * const courses = await prisma.courses.findMany()
    * ```
    */
  get courses(): Prisma.coursesDelegate<ExtArgs>;

  /**
   * `prisma.modules`: Exposes CRUD operations for the **modules** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Modules
    * const modules = await prisma.modules.findMany()
    * ```
    */
  get modules(): Prisma.modulesDelegate<ExtArgs>;

  /**
   * `prisma.progress`: Exposes CRUD operations for the **progress** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Progresses
    * const progresses = await prisma.progress.findMany()
    * ```
    */
  get progress(): Prisma.progressDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.17.0
   * Query Engine version: 393aa359c9ad4a4bb28630fb5613f9c281cde053
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    flyway_schema_history: 'flyway_schema_history',
    users: 'users',
    course_trainees: 'course_trainees',
    courses: 'courses',
    modules: 'modules',
    progress: 'progress'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "flyway_schema_history" | "users" | "course_trainees" | "courses" | "modules" | "progress"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      flyway_schema_history: {
        payload: Prisma.$flyway_schema_historyPayload<ExtArgs>
        fields: Prisma.flyway_schema_historyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.flyway_schema_historyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$flyway_schema_historyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.flyway_schema_historyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$flyway_schema_historyPayload>
          }
          findFirst: {
            args: Prisma.flyway_schema_historyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$flyway_schema_historyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.flyway_schema_historyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$flyway_schema_historyPayload>
          }
          findMany: {
            args: Prisma.flyway_schema_historyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$flyway_schema_historyPayload>[]
          }
          create: {
            args: Prisma.flyway_schema_historyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$flyway_schema_historyPayload>
          }
          createMany: {
            args: Prisma.flyway_schema_historyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.flyway_schema_historyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$flyway_schema_historyPayload>[]
          }
          delete: {
            args: Prisma.flyway_schema_historyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$flyway_schema_historyPayload>
          }
          update: {
            args: Prisma.flyway_schema_historyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$flyway_schema_historyPayload>
          }
          deleteMany: {
            args: Prisma.flyway_schema_historyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.flyway_schema_historyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.flyway_schema_historyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$flyway_schema_historyPayload>
          }
          aggregate: {
            args: Prisma.Flyway_schema_historyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFlyway_schema_history>
          }
          groupBy: {
            args: Prisma.flyway_schema_historyGroupByArgs<ExtArgs>
            result: $Utils.Optional<Flyway_schema_historyGroupByOutputType>[]
          }
          count: {
            args: Prisma.flyway_schema_historyCountArgs<ExtArgs>
            result: $Utils.Optional<Flyway_schema_historyCountAggregateOutputType> | number
          }
        }
      }
      users: {
        payload: Prisma.$usersPayload<ExtArgs>
        fields: Prisma.usersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.usersFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.usersFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          findFirst: {
            args: Prisma.usersFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.usersFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          findMany: {
            args: Prisma.usersFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>[]
          }
          create: {
            args: Prisma.usersCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          createMany: {
            args: Prisma.usersCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.usersCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>[]
          }
          delete: {
            args: Prisma.usersDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          update: {
            args: Prisma.usersUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          deleteMany: {
            args: Prisma.usersDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.usersUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.usersUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          aggregate: {
            args: Prisma.UsersAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsers>
          }
          groupBy: {
            args: Prisma.usersGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsersGroupByOutputType>[]
          }
          count: {
            args: Prisma.usersCountArgs<ExtArgs>
            result: $Utils.Optional<UsersCountAggregateOutputType> | number
          }
        }
      }
      course_trainees: {
        payload: Prisma.$course_traineesPayload<ExtArgs>
        fields: Prisma.course_traineesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.course_traineesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$course_traineesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.course_traineesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$course_traineesPayload>
          }
          findFirst: {
            args: Prisma.course_traineesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$course_traineesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.course_traineesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$course_traineesPayload>
          }
          findMany: {
            args: Prisma.course_traineesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$course_traineesPayload>[]
          }
          create: {
            args: Prisma.course_traineesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$course_traineesPayload>
          }
          createMany: {
            args: Prisma.course_traineesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.course_traineesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$course_traineesPayload>[]
          }
          delete: {
            args: Prisma.course_traineesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$course_traineesPayload>
          }
          update: {
            args: Prisma.course_traineesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$course_traineesPayload>
          }
          deleteMany: {
            args: Prisma.course_traineesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.course_traineesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.course_traineesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$course_traineesPayload>
          }
          aggregate: {
            args: Prisma.Course_traineesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCourse_trainees>
          }
          groupBy: {
            args: Prisma.course_traineesGroupByArgs<ExtArgs>
            result: $Utils.Optional<Course_traineesGroupByOutputType>[]
          }
          count: {
            args: Prisma.course_traineesCountArgs<ExtArgs>
            result: $Utils.Optional<Course_traineesCountAggregateOutputType> | number
          }
        }
      }
      courses: {
        payload: Prisma.$coursesPayload<ExtArgs>
        fields: Prisma.coursesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.coursesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$coursesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.coursesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$coursesPayload>
          }
          findFirst: {
            args: Prisma.coursesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$coursesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.coursesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$coursesPayload>
          }
          findMany: {
            args: Prisma.coursesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$coursesPayload>[]
          }
          create: {
            args: Prisma.coursesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$coursesPayload>
          }
          createMany: {
            args: Prisma.coursesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.coursesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$coursesPayload>[]
          }
          delete: {
            args: Prisma.coursesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$coursesPayload>
          }
          update: {
            args: Prisma.coursesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$coursesPayload>
          }
          deleteMany: {
            args: Prisma.coursesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.coursesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.coursesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$coursesPayload>
          }
          aggregate: {
            args: Prisma.CoursesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCourses>
          }
          groupBy: {
            args: Prisma.coursesGroupByArgs<ExtArgs>
            result: $Utils.Optional<CoursesGroupByOutputType>[]
          }
          count: {
            args: Prisma.coursesCountArgs<ExtArgs>
            result: $Utils.Optional<CoursesCountAggregateOutputType> | number
          }
        }
      }
      modules: {
        payload: Prisma.$modulesPayload<ExtArgs>
        fields: Prisma.modulesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.modulesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$modulesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.modulesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$modulesPayload>
          }
          findFirst: {
            args: Prisma.modulesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$modulesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.modulesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$modulesPayload>
          }
          findMany: {
            args: Prisma.modulesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$modulesPayload>[]
          }
          create: {
            args: Prisma.modulesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$modulesPayload>
          }
          createMany: {
            args: Prisma.modulesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.modulesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$modulesPayload>[]
          }
          delete: {
            args: Prisma.modulesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$modulesPayload>
          }
          update: {
            args: Prisma.modulesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$modulesPayload>
          }
          deleteMany: {
            args: Prisma.modulesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.modulesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.modulesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$modulesPayload>
          }
          aggregate: {
            args: Prisma.ModulesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateModules>
          }
          groupBy: {
            args: Prisma.modulesGroupByArgs<ExtArgs>
            result: $Utils.Optional<ModulesGroupByOutputType>[]
          }
          count: {
            args: Prisma.modulesCountArgs<ExtArgs>
            result: $Utils.Optional<ModulesCountAggregateOutputType> | number
          }
        }
      }
      progress: {
        payload: Prisma.$progressPayload<ExtArgs>
        fields: Prisma.progressFieldRefs
        operations: {
          findUnique: {
            args: Prisma.progressFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$progressPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.progressFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$progressPayload>
          }
          findFirst: {
            args: Prisma.progressFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$progressPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.progressFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$progressPayload>
          }
          findMany: {
            args: Prisma.progressFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$progressPayload>[]
          }
          create: {
            args: Prisma.progressCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$progressPayload>
          }
          createMany: {
            args: Prisma.progressCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.progressCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$progressPayload>[]
          }
          delete: {
            args: Prisma.progressDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$progressPayload>
          }
          update: {
            args: Prisma.progressUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$progressPayload>
          }
          deleteMany: {
            args: Prisma.progressDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.progressUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.progressUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$progressPayload>
          }
          aggregate: {
            args: Prisma.ProgressAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProgress>
          }
          groupBy: {
            args: Prisma.progressGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProgressGroupByOutputType>[]
          }
          count: {
            args: Prisma.progressCountArgs<ExtArgs>
            result: $Utils.Optional<ProgressCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UsersCountOutputType
   */

  export type UsersCountOutputType = {
    course_trainees: number
    courses: number
    progress: number
  }

  export type UsersCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    course_trainees?: boolean | UsersCountOutputTypeCountCourse_traineesArgs
    courses?: boolean | UsersCountOutputTypeCountCoursesArgs
    progress?: boolean | UsersCountOutputTypeCountProgressArgs
  }

  // Custom InputTypes
  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersCountOutputType
     */
    select?: UsersCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountCourse_traineesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: course_traineesWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountCoursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: coursesWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountProgressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: progressWhereInput
  }


  /**
   * Count Type CoursesCountOutputType
   */

  export type CoursesCountOutputType = {
    course_trainees: number
    modules: number
    progress: number
  }

  export type CoursesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    course_trainees?: boolean | CoursesCountOutputTypeCountCourse_traineesArgs
    modules?: boolean | CoursesCountOutputTypeCountModulesArgs
    progress?: boolean | CoursesCountOutputTypeCountProgressArgs
  }

  // Custom InputTypes
  /**
   * CoursesCountOutputType without action
   */
  export type CoursesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoursesCountOutputType
     */
    select?: CoursesCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CoursesCountOutputType without action
   */
  export type CoursesCountOutputTypeCountCourse_traineesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: course_traineesWhereInput
  }

  /**
   * CoursesCountOutputType without action
   */
  export type CoursesCountOutputTypeCountModulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: modulesWhereInput
  }

  /**
   * CoursesCountOutputType without action
   */
  export type CoursesCountOutputTypeCountProgressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: progressWhereInput
  }


  /**
   * Count Type ModulesCountOutputType
   */

  export type ModulesCountOutputType = {
    progress: number
  }

  export type ModulesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    progress?: boolean | ModulesCountOutputTypeCountProgressArgs
  }

  // Custom InputTypes
  /**
   * ModulesCountOutputType without action
   */
  export type ModulesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ModulesCountOutputType
     */
    select?: ModulesCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ModulesCountOutputType without action
   */
  export type ModulesCountOutputTypeCountProgressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: progressWhereInput
  }


  /**
   * Models
   */

  /**
   * Model flyway_schema_history
   */

  export type AggregateFlyway_schema_history = {
    _count: Flyway_schema_historyCountAggregateOutputType | null
    _avg: Flyway_schema_historyAvgAggregateOutputType | null
    _sum: Flyway_schema_historySumAggregateOutputType | null
    _min: Flyway_schema_historyMinAggregateOutputType | null
    _max: Flyway_schema_historyMaxAggregateOutputType | null
  }

  export type Flyway_schema_historyAvgAggregateOutputType = {
    installed_rank: number | null
    checksum: number | null
    execution_time: number | null
  }

  export type Flyway_schema_historySumAggregateOutputType = {
    installed_rank: number | null
    checksum: number | null
    execution_time: number | null
  }

  export type Flyway_schema_historyMinAggregateOutputType = {
    installed_rank: number | null
    version: string | null
    description: string | null
    type: string | null
    script: string | null
    checksum: number | null
    installed_by: string | null
    installed_on: Date | null
    execution_time: number | null
    success: boolean | null
  }

  export type Flyway_schema_historyMaxAggregateOutputType = {
    installed_rank: number | null
    version: string | null
    description: string | null
    type: string | null
    script: string | null
    checksum: number | null
    installed_by: string | null
    installed_on: Date | null
    execution_time: number | null
    success: boolean | null
  }

  export type Flyway_schema_historyCountAggregateOutputType = {
    installed_rank: number
    version: number
    description: number
    type: number
    script: number
    checksum: number
    installed_by: number
    installed_on: number
    execution_time: number
    success: number
    _all: number
  }


  export type Flyway_schema_historyAvgAggregateInputType = {
    installed_rank?: true
    checksum?: true
    execution_time?: true
  }

  export type Flyway_schema_historySumAggregateInputType = {
    installed_rank?: true
    checksum?: true
    execution_time?: true
  }

  export type Flyway_schema_historyMinAggregateInputType = {
    installed_rank?: true
    version?: true
    description?: true
    type?: true
    script?: true
    checksum?: true
    installed_by?: true
    installed_on?: true
    execution_time?: true
    success?: true
  }

  export type Flyway_schema_historyMaxAggregateInputType = {
    installed_rank?: true
    version?: true
    description?: true
    type?: true
    script?: true
    checksum?: true
    installed_by?: true
    installed_on?: true
    execution_time?: true
    success?: true
  }

  export type Flyway_schema_historyCountAggregateInputType = {
    installed_rank?: true
    version?: true
    description?: true
    type?: true
    script?: true
    checksum?: true
    installed_by?: true
    installed_on?: true
    execution_time?: true
    success?: true
    _all?: true
  }

  export type Flyway_schema_historyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which flyway_schema_history to aggregate.
     */
    where?: flyway_schema_historyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of flyway_schema_histories to fetch.
     */
    orderBy?: flyway_schema_historyOrderByWithRelationInput | flyway_schema_historyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: flyway_schema_historyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` flyway_schema_histories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` flyway_schema_histories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned flyway_schema_histories
    **/
    _count?: true | Flyway_schema_historyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Flyway_schema_historyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Flyway_schema_historySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Flyway_schema_historyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Flyway_schema_historyMaxAggregateInputType
  }

  export type GetFlyway_schema_historyAggregateType<T extends Flyway_schema_historyAggregateArgs> = {
        [P in keyof T & keyof AggregateFlyway_schema_history]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFlyway_schema_history[P]>
      : GetScalarType<T[P], AggregateFlyway_schema_history[P]>
  }




  export type flyway_schema_historyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: flyway_schema_historyWhereInput
    orderBy?: flyway_schema_historyOrderByWithAggregationInput | flyway_schema_historyOrderByWithAggregationInput[]
    by: Flyway_schema_historyScalarFieldEnum[] | Flyway_schema_historyScalarFieldEnum
    having?: flyway_schema_historyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Flyway_schema_historyCountAggregateInputType | true
    _avg?: Flyway_schema_historyAvgAggregateInputType
    _sum?: Flyway_schema_historySumAggregateInputType
    _min?: Flyway_schema_historyMinAggregateInputType
    _max?: Flyway_schema_historyMaxAggregateInputType
  }

  export type Flyway_schema_historyGroupByOutputType = {
    installed_rank: number
    version: string | null
    description: string
    type: string
    script: string
    checksum: number | null
    installed_by: string
    installed_on: Date
    execution_time: number
    success: boolean
    _count: Flyway_schema_historyCountAggregateOutputType | null
    _avg: Flyway_schema_historyAvgAggregateOutputType | null
    _sum: Flyway_schema_historySumAggregateOutputType | null
    _min: Flyway_schema_historyMinAggregateOutputType | null
    _max: Flyway_schema_historyMaxAggregateOutputType | null
  }

  type GetFlyway_schema_historyGroupByPayload<T extends flyway_schema_historyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Flyway_schema_historyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Flyway_schema_historyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Flyway_schema_historyGroupByOutputType[P]>
            : GetScalarType<T[P], Flyway_schema_historyGroupByOutputType[P]>
        }
      >
    >


  export type flyway_schema_historySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    installed_rank?: boolean
    version?: boolean
    description?: boolean
    type?: boolean
    script?: boolean
    checksum?: boolean
    installed_by?: boolean
    installed_on?: boolean
    execution_time?: boolean
    success?: boolean
  }, ExtArgs["result"]["flyway_schema_history"]>

  export type flyway_schema_historySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    installed_rank?: boolean
    version?: boolean
    description?: boolean
    type?: boolean
    script?: boolean
    checksum?: boolean
    installed_by?: boolean
    installed_on?: boolean
    execution_time?: boolean
    success?: boolean
  }, ExtArgs["result"]["flyway_schema_history"]>

  export type flyway_schema_historySelectScalar = {
    installed_rank?: boolean
    version?: boolean
    description?: boolean
    type?: boolean
    script?: boolean
    checksum?: boolean
    installed_by?: boolean
    installed_on?: boolean
    execution_time?: boolean
    success?: boolean
  }


  export type $flyway_schema_historyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "flyway_schema_history"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      installed_rank: number
      version: string | null
      description: string
      type: string
      script: string
      checksum: number | null
      installed_by: string
      installed_on: Date
      execution_time: number
      success: boolean
    }, ExtArgs["result"]["flyway_schema_history"]>
    composites: {}
  }

  type flyway_schema_historyGetPayload<S extends boolean | null | undefined | flyway_schema_historyDefaultArgs> = $Result.GetResult<Prisma.$flyway_schema_historyPayload, S>

  type flyway_schema_historyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<flyway_schema_historyFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Flyway_schema_historyCountAggregateInputType | true
    }

  export interface flyway_schema_historyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['flyway_schema_history'], meta: { name: 'flyway_schema_history' } }
    /**
     * Find zero or one Flyway_schema_history that matches the filter.
     * @param {flyway_schema_historyFindUniqueArgs} args - Arguments to find a Flyway_schema_history
     * @example
     * // Get one Flyway_schema_history
     * const flyway_schema_history = await prisma.flyway_schema_history.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends flyway_schema_historyFindUniqueArgs>(args: SelectSubset<T, flyway_schema_historyFindUniqueArgs<ExtArgs>>): Prisma__flyway_schema_historyClient<$Result.GetResult<Prisma.$flyway_schema_historyPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Flyway_schema_history that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {flyway_schema_historyFindUniqueOrThrowArgs} args - Arguments to find a Flyway_schema_history
     * @example
     * // Get one Flyway_schema_history
     * const flyway_schema_history = await prisma.flyway_schema_history.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends flyway_schema_historyFindUniqueOrThrowArgs>(args: SelectSubset<T, flyway_schema_historyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__flyway_schema_historyClient<$Result.GetResult<Prisma.$flyway_schema_historyPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Flyway_schema_history that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {flyway_schema_historyFindFirstArgs} args - Arguments to find a Flyway_schema_history
     * @example
     * // Get one Flyway_schema_history
     * const flyway_schema_history = await prisma.flyway_schema_history.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends flyway_schema_historyFindFirstArgs>(args?: SelectSubset<T, flyway_schema_historyFindFirstArgs<ExtArgs>>): Prisma__flyway_schema_historyClient<$Result.GetResult<Prisma.$flyway_schema_historyPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Flyway_schema_history that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {flyway_schema_historyFindFirstOrThrowArgs} args - Arguments to find a Flyway_schema_history
     * @example
     * // Get one Flyway_schema_history
     * const flyway_schema_history = await prisma.flyway_schema_history.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends flyway_schema_historyFindFirstOrThrowArgs>(args?: SelectSubset<T, flyway_schema_historyFindFirstOrThrowArgs<ExtArgs>>): Prisma__flyway_schema_historyClient<$Result.GetResult<Prisma.$flyway_schema_historyPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Flyway_schema_histories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {flyway_schema_historyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Flyway_schema_histories
     * const flyway_schema_histories = await prisma.flyway_schema_history.findMany()
     * 
     * // Get first 10 Flyway_schema_histories
     * const flyway_schema_histories = await prisma.flyway_schema_history.findMany({ take: 10 })
     * 
     * // Only select the `installed_rank`
     * const flyway_schema_historyWithInstalled_rankOnly = await prisma.flyway_schema_history.findMany({ select: { installed_rank: true } })
     * 
     */
    findMany<T extends flyway_schema_historyFindManyArgs>(args?: SelectSubset<T, flyway_schema_historyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$flyway_schema_historyPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Flyway_schema_history.
     * @param {flyway_schema_historyCreateArgs} args - Arguments to create a Flyway_schema_history.
     * @example
     * // Create one Flyway_schema_history
     * const Flyway_schema_history = await prisma.flyway_schema_history.create({
     *   data: {
     *     // ... data to create a Flyway_schema_history
     *   }
     * })
     * 
     */
    create<T extends flyway_schema_historyCreateArgs>(args: SelectSubset<T, flyway_schema_historyCreateArgs<ExtArgs>>): Prisma__flyway_schema_historyClient<$Result.GetResult<Prisma.$flyway_schema_historyPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Flyway_schema_histories.
     * @param {flyway_schema_historyCreateManyArgs} args - Arguments to create many Flyway_schema_histories.
     * @example
     * // Create many Flyway_schema_histories
     * const flyway_schema_history = await prisma.flyway_schema_history.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends flyway_schema_historyCreateManyArgs>(args?: SelectSubset<T, flyway_schema_historyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Flyway_schema_histories and returns the data saved in the database.
     * @param {flyway_schema_historyCreateManyAndReturnArgs} args - Arguments to create many Flyway_schema_histories.
     * @example
     * // Create many Flyway_schema_histories
     * const flyway_schema_history = await prisma.flyway_schema_history.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Flyway_schema_histories and only return the `installed_rank`
     * const flyway_schema_historyWithInstalled_rankOnly = await prisma.flyway_schema_history.createManyAndReturn({ 
     *   select: { installed_rank: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends flyway_schema_historyCreateManyAndReturnArgs>(args?: SelectSubset<T, flyway_schema_historyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$flyway_schema_historyPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Flyway_schema_history.
     * @param {flyway_schema_historyDeleteArgs} args - Arguments to delete one Flyway_schema_history.
     * @example
     * // Delete one Flyway_schema_history
     * const Flyway_schema_history = await prisma.flyway_schema_history.delete({
     *   where: {
     *     // ... filter to delete one Flyway_schema_history
     *   }
     * })
     * 
     */
    delete<T extends flyway_schema_historyDeleteArgs>(args: SelectSubset<T, flyway_schema_historyDeleteArgs<ExtArgs>>): Prisma__flyway_schema_historyClient<$Result.GetResult<Prisma.$flyway_schema_historyPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Flyway_schema_history.
     * @param {flyway_schema_historyUpdateArgs} args - Arguments to update one Flyway_schema_history.
     * @example
     * // Update one Flyway_schema_history
     * const flyway_schema_history = await prisma.flyway_schema_history.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends flyway_schema_historyUpdateArgs>(args: SelectSubset<T, flyway_schema_historyUpdateArgs<ExtArgs>>): Prisma__flyway_schema_historyClient<$Result.GetResult<Prisma.$flyway_schema_historyPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Flyway_schema_histories.
     * @param {flyway_schema_historyDeleteManyArgs} args - Arguments to filter Flyway_schema_histories to delete.
     * @example
     * // Delete a few Flyway_schema_histories
     * const { count } = await prisma.flyway_schema_history.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends flyway_schema_historyDeleteManyArgs>(args?: SelectSubset<T, flyway_schema_historyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Flyway_schema_histories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {flyway_schema_historyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Flyway_schema_histories
     * const flyway_schema_history = await prisma.flyway_schema_history.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends flyway_schema_historyUpdateManyArgs>(args: SelectSubset<T, flyway_schema_historyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Flyway_schema_history.
     * @param {flyway_schema_historyUpsertArgs} args - Arguments to update or create a Flyway_schema_history.
     * @example
     * // Update or create a Flyway_schema_history
     * const flyway_schema_history = await prisma.flyway_schema_history.upsert({
     *   create: {
     *     // ... data to create a Flyway_schema_history
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Flyway_schema_history we want to update
     *   }
     * })
     */
    upsert<T extends flyway_schema_historyUpsertArgs>(args: SelectSubset<T, flyway_schema_historyUpsertArgs<ExtArgs>>): Prisma__flyway_schema_historyClient<$Result.GetResult<Prisma.$flyway_schema_historyPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Flyway_schema_histories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {flyway_schema_historyCountArgs} args - Arguments to filter Flyway_schema_histories to count.
     * @example
     * // Count the number of Flyway_schema_histories
     * const count = await prisma.flyway_schema_history.count({
     *   where: {
     *     // ... the filter for the Flyway_schema_histories we want to count
     *   }
     * })
    **/
    count<T extends flyway_schema_historyCountArgs>(
      args?: Subset<T, flyway_schema_historyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Flyway_schema_historyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Flyway_schema_history.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Flyway_schema_historyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Flyway_schema_historyAggregateArgs>(args: Subset<T, Flyway_schema_historyAggregateArgs>): Prisma.PrismaPromise<GetFlyway_schema_historyAggregateType<T>>

    /**
     * Group by Flyway_schema_history.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {flyway_schema_historyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends flyway_schema_historyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: flyway_schema_historyGroupByArgs['orderBy'] }
        : { orderBy?: flyway_schema_historyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, flyway_schema_historyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFlyway_schema_historyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the flyway_schema_history model
   */
  readonly fields: flyway_schema_historyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for flyway_schema_history.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__flyway_schema_historyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the flyway_schema_history model
   */ 
  interface flyway_schema_historyFieldRefs {
    readonly installed_rank: FieldRef<"flyway_schema_history", 'Int'>
    readonly version: FieldRef<"flyway_schema_history", 'String'>
    readonly description: FieldRef<"flyway_schema_history", 'String'>
    readonly type: FieldRef<"flyway_schema_history", 'String'>
    readonly script: FieldRef<"flyway_schema_history", 'String'>
    readonly checksum: FieldRef<"flyway_schema_history", 'Int'>
    readonly installed_by: FieldRef<"flyway_schema_history", 'String'>
    readonly installed_on: FieldRef<"flyway_schema_history", 'DateTime'>
    readonly execution_time: FieldRef<"flyway_schema_history", 'Int'>
    readonly success: FieldRef<"flyway_schema_history", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * flyway_schema_history findUnique
   */
  export type flyway_schema_historyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the flyway_schema_history
     */
    select?: flyway_schema_historySelect<ExtArgs> | null
    /**
     * Filter, which flyway_schema_history to fetch.
     */
    where: flyway_schema_historyWhereUniqueInput
  }

  /**
   * flyway_schema_history findUniqueOrThrow
   */
  export type flyway_schema_historyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the flyway_schema_history
     */
    select?: flyway_schema_historySelect<ExtArgs> | null
    /**
     * Filter, which flyway_schema_history to fetch.
     */
    where: flyway_schema_historyWhereUniqueInput
  }

  /**
   * flyway_schema_history findFirst
   */
  export type flyway_schema_historyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the flyway_schema_history
     */
    select?: flyway_schema_historySelect<ExtArgs> | null
    /**
     * Filter, which flyway_schema_history to fetch.
     */
    where?: flyway_schema_historyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of flyway_schema_histories to fetch.
     */
    orderBy?: flyway_schema_historyOrderByWithRelationInput | flyway_schema_historyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for flyway_schema_histories.
     */
    cursor?: flyway_schema_historyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` flyway_schema_histories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` flyway_schema_histories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of flyway_schema_histories.
     */
    distinct?: Flyway_schema_historyScalarFieldEnum | Flyway_schema_historyScalarFieldEnum[]
  }

  /**
   * flyway_schema_history findFirstOrThrow
   */
  export type flyway_schema_historyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the flyway_schema_history
     */
    select?: flyway_schema_historySelect<ExtArgs> | null
    /**
     * Filter, which flyway_schema_history to fetch.
     */
    where?: flyway_schema_historyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of flyway_schema_histories to fetch.
     */
    orderBy?: flyway_schema_historyOrderByWithRelationInput | flyway_schema_historyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for flyway_schema_histories.
     */
    cursor?: flyway_schema_historyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` flyway_schema_histories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` flyway_schema_histories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of flyway_schema_histories.
     */
    distinct?: Flyway_schema_historyScalarFieldEnum | Flyway_schema_historyScalarFieldEnum[]
  }

  /**
   * flyway_schema_history findMany
   */
  export type flyway_schema_historyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the flyway_schema_history
     */
    select?: flyway_schema_historySelect<ExtArgs> | null
    /**
     * Filter, which flyway_schema_histories to fetch.
     */
    where?: flyway_schema_historyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of flyway_schema_histories to fetch.
     */
    orderBy?: flyway_schema_historyOrderByWithRelationInput | flyway_schema_historyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing flyway_schema_histories.
     */
    cursor?: flyway_schema_historyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` flyway_schema_histories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` flyway_schema_histories.
     */
    skip?: number
    distinct?: Flyway_schema_historyScalarFieldEnum | Flyway_schema_historyScalarFieldEnum[]
  }

  /**
   * flyway_schema_history create
   */
  export type flyway_schema_historyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the flyway_schema_history
     */
    select?: flyway_schema_historySelect<ExtArgs> | null
    /**
     * The data needed to create a flyway_schema_history.
     */
    data: XOR<flyway_schema_historyCreateInput, flyway_schema_historyUncheckedCreateInput>
  }

  /**
   * flyway_schema_history createMany
   */
  export type flyway_schema_historyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many flyway_schema_histories.
     */
    data: flyway_schema_historyCreateManyInput | flyway_schema_historyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * flyway_schema_history createManyAndReturn
   */
  export type flyway_schema_historyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the flyway_schema_history
     */
    select?: flyway_schema_historySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many flyway_schema_histories.
     */
    data: flyway_schema_historyCreateManyInput | flyway_schema_historyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * flyway_schema_history update
   */
  export type flyway_schema_historyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the flyway_schema_history
     */
    select?: flyway_schema_historySelect<ExtArgs> | null
    /**
     * The data needed to update a flyway_schema_history.
     */
    data: XOR<flyway_schema_historyUpdateInput, flyway_schema_historyUncheckedUpdateInput>
    /**
     * Choose, which flyway_schema_history to update.
     */
    where: flyway_schema_historyWhereUniqueInput
  }

  /**
   * flyway_schema_history updateMany
   */
  export type flyway_schema_historyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update flyway_schema_histories.
     */
    data: XOR<flyway_schema_historyUpdateManyMutationInput, flyway_schema_historyUncheckedUpdateManyInput>
    /**
     * Filter which flyway_schema_histories to update
     */
    where?: flyway_schema_historyWhereInput
  }

  /**
   * flyway_schema_history upsert
   */
  export type flyway_schema_historyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the flyway_schema_history
     */
    select?: flyway_schema_historySelect<ExtArgs> | null
    /**
     * The filter to search for the flyway_schema_history to update in case it exists.
     */
    where: flyway_schema_historyWhereUniqueInput
    /**
     * In case the flyway_schema_history found by the `where` argument doesn't exist, create a new flyway_schema_history with this data.
     */
    create: XOR<flyway_schema_historyCreateInput, flyway_schema_historyUncheckedCreateInput>
    /**
     * In case the flyway_schema_history was found with the provided `where` argument, update it with this data.
     */
    update: XOR<flyway_schema_historyUpdateInput, flyway_schema_historyUncheckedUpdateInput>
  }

  /**
   * flyway_schema_history delete
   */
  export type flyway_schema_historyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the flyway_schema_history
     */
    select?: flyway_schema_historySelect<ExtArgs> | null
    /**
     * Filter which flyway_schema_history to delete.
     */
    where: flyway_schema_historyWhereUniqueInput
  }

  /**
   * flyway_schema_history deleteMany
   */
  export type flyway_schema_historyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which flyway_schema_histories to delete
     */
    where?: flyway_schema_historyWhereInput
  }

  /**
   * flyway_schema_history without action
   */
  export type flyway_schema_historyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the flyway_schema_history
     */
    select?: flyway_schema_historySelect<ExtArgs> | null
  }


  /**
   * Model users
   */

  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersAvgAggregateOutputType = {
    id: number | null
  }

  export type UsersSumAggregateOutputType = {
    id: number | null
  }

  export type UsersMinAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    role: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type UsersMaxAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    role: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type UsersCountAggregateOutputType = {
    id: number
    email: number
    password: number
    role: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type UsersAvgAggregateInputType = {
    id?: true
  }

  export type UsersSumAggregateInputType = {
    id?: true
  }

  export type UsersMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    role?: true
    created_at?: true
    updated_at?: true
  }

  export type UsersMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    role?: true
    created_at?: true
    updated_at?: true
  }

  export type UsersCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    role?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type UsersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to aggregate.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type usersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: usersWhereInput
    orderBy?: usersOrderByWithAggregationInput | usersOrderByWithAggregationInput[]
    by: UsersScalarFieldEnum[] | UsersScalarFieldEnum
    having?: usersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _avg?: UsersAvgAggregateInputType
    _sum?: UsersSumAggregateInputType
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }

  export type UsersGroupByOutputType = {
    id: number
    email: string
    password: string
    role: string
    created_at: Date | null
    updated_at: Date | null
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends usersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type usersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    created_at?: boolean
    updated_at?: boolean
    course_trainees?: boolean | users$course_traineesArgs<ExtArgs>
    courses?: boolean | users$coursesArgs<ExtArgs>
    progress?: boolean | users$progressArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["users"]>

  export type usersSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["users"]>

  export type usersSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type usersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    course_trainees?: boolean | users$course_traineesArgs<ExtArgs>
    courses?: boolean | users$coursesArgs<ExtArgs>
    progress?: boolean | users$progressArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type usersIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $usersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "users"
    objects: {
      course_trainees: Prisma.$course_traineesPayload<ExtArgs>[]
      courses: Prisma.$coursesPayload<ExtArgs>[]
      progress: Prisma.$progressPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      email: string
      password: string
      role: string
      created_at: Date | null
      updated_at: Date | null
    }, ExtArgs["result"]["users"]>
    composites: {}
  }

  type usersGetPayload<S extends boolean | null | undefined | usersDefaultArgs> = $Result.GetResult<Prisma.$usersPayload, S>

  type usersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<usersFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UsersCountAggregateInputType | true
    }

  export interface usersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['users'], meta: { name: 'users' } }
    /**
     * Find zero or one Users that matches the filter.
     * @param {usersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends usersFindUniqueArgs>(args: SelectSubset<T, usersFindUniqueArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Users that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {usersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends usersFindUniqueOrThrowArgs>(args: SelectSubset<T, usersFindUniqueOrThrowArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends usersFindFirstArgs>(args?: SelectSubset<T, usersFindFirstArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Users that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends usersFindFirstOrThrowArgs>(args?: SelectSubset<T, usersFindFirstOrThrowArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usersWithIdOnly = await prisma.users.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends usersFindManyArgs>(args?: SelectSubset<T, usersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Users.
     * @param {usersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
     */
    create<T extends usersCreateArgs>(args: SelectSubset<T, usersCreateArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {usersCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const users = await prisma.users.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends usersCreateManyArgs>(args?: SelectSubset<T, usersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {usersCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const users = await prisma.users.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const usersWithIdOnly = await prisma.users.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends usersCreateManyAndReturnArgs>(args?: SelectSubset<T, usersCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Users.
     * @param {usersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
     */
    delete<T extends usersDeleteArgs>(args: SelectSubset<T, usersDeleteArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Users.
     * @param {usersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends usersUpdateArgs>(args: SelectSubset<T, usersUpdateArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {usersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends usersDeleteManyArgs>(args?: SelectSubset<T, usersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends usersUpdateManyArgs>(args: SelectSubset<T, usersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {usersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
     */
    upsert<T extends usersUpsertArgs>(args: SelectSubset<T, usersUpsertArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends usersCountArgs>(
      args?: Subset<T, usersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): Prisma.PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends usersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: usersGroupByArgs['orderBy'] }
        : { orderBy?: usersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, usersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the users model
   */
  readonly fields: usersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__usersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    course_trainees<T extends users$course_traineesArgs<ExtArgs> = {}>(args?: Subset<T, users$course_traineesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$course_traineesPayload<ExtArgs>, T, "findMany"> | Null>
    courses<T extends users$coursesArgs<ExtArgs> = {}>(args?: Subset<T, users$coursesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$coursesPayload<ExtArgs>, T, "findMany"> | Null>
    progress<T extends users$progressArgs<ExtArgs> = {}>(args?: Subset<T, users$progressArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$progressPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the users model
   */ 
  interface usersFieldRefs {
    readonly id: FieldRef<"users", 'Int'>
    readonly email: FieldRef<"users", 'String'>
    readonly password: FieldRef<"users", 'String'>
    readonly role: FieldRef<"users", 'String'>
    readonly created_at: FieldRef<"users", 'DateTime'>
    readonly updated_at: FieldRef<"users", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * users findUnique
   */
  export type usersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users findUniqueOrThrow
   */
  export type usersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users findFirst
   */
  export type usersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * users findFirstOrThrow
   */
  export type usersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * users findMany
   */
  export type usersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * users create
   */
  export type usersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The data needed to create a users.
     */
    data: XOR<usersCreateInput, usersUncheckedCreateInput>
  }

  /**
   * users createMany
   */
  export type usersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many users.
     */
    data: usersCreateManyInput | usersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * users createManyAndReturn
   */
  export type usersCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many users.
     */
    data: usersCreateManyInput | usersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * users update
   */
  export type usersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The data needed to update a users.
     */
    data: XOR<usersUpdateInput, usersUncheckedUpdateInput>
    /**
     * Choose, which users to update.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users updateMany
   */
  export type usersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update users.
     */
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: usersWhereInput
  }

  /**
   * users upsert
   */
  export type usersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The filter to search for the users to update in case it exists.
     */
    where: usersWhereUniqueInput
    /**
     * In case the users found by the `where` argument doesn't exist, create a new users with this data.
     */
    create: XOR<usersCreateInput, usersUncheckedCreateInput>
    /**
     * In case the users was found with the provided `where` argument, update it with this data.
     */
    update: XOR<usersUpdateInput, usersUncheckedUpdateInput>
  }

  /**
   * users delete
   */
  export type usersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter which users to delete.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users deleteMany
   */
  export type usersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to delete
     */
    where?: usersWhereInput
  }

  /**
   * users.course_trainees
   */
  export type users$course_traineesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the course_trainees
     */
    select?: course_traineesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: course_traineesInclude<ExtArgs> | null
    where?: course_traineesWhereInput
    orderBy?: course_traineesOrderByWithRelationInput | course_traineesOrderByWithRelationInput[]
    cursor?: course_traineesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Course_traineesScalarFieldEnum | Course_traineesScalarFieldEnum[]
  }

  /**
   * users.courses
   */
  export type users$coursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the courses
     */
    select?: coursesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: coursesInclude<ExtArgs> | null
    where?: coursesWhereInput
    orderBy?: coursesOrderByWithRelationInput | coursesOrderByWithRelationInput[]
    cursor?: coursesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CoursesScalarFieldEnum | CoursesScalarFieldEnum[]
  }

  /**
   * users.progress
   */
  export type users$progressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the progress
     */
    select?: progressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: progressInclude<ExtArgs> | null
    where?: progressWhereInput
    orderBy?: progressOrderByWithRelationInput | progressOrderByWithRelationInput[]
    cursor?: progressWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProgressScalarFieldEnum | ProgressScalarFieldEnum[]
  }

  /**
   * users without action
   */
  export type usersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
  }


  /**
   * Model course_trainees
   */

  export type AggregateCourse_trainees = {
    _count: Course_traineesCountAggregateOutputType | null
    _avg: Course_traineesAvgAggregateOutputType | null
    _sum: Course_traineesSumAggregateOutputType | null
    _min: Course_traineesMinAggregateOutputType | null
    _max: Course_traineesMaxAggregateOutputType | null
  }

  export type Course_traineesAvgAggregateOutputType = {
    course_id: number | null
    trainee_id: number | null
  }

  export type Course_traineesSumAggregateOutputType = {
    course_id: number | null
    trainee_id: number | null
  }

  export type Course_traineesMinAggregateOutputType = {
    course_id: number | null
    trainee_id: number | null
  }

  export type Course_traineesMaxAggregateOutputType = {
    course_id: number | null
    trainee_id: number | null
  }

  export type Course_traineesCountAggregateOutputType = {
    course_id: number
    trainee_id: number
    _all: number
  }


  export type Course_traineesAvgAggregateInputType = {
    course_id?: true
    trainee_id?: true
  }

  export type Course_traineesSumAggregateInputType = {
    course_id?: true
    trainee_id?: true
  }

  export type Course_traineesMinAggregateInputType = {
    course_id?: true
    trainee_id?: true
  }

  export type Course_traineesMaxAggregateInputType = {
    course_id?: true
    trainee_id?: true
  }

  export type Course_traineesCountAggregateInputType = {
    course_id?: true
    trainee_id?: true
    _all?: true
  }

  export type Course_traineesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which course_trainees to aggregate.
     */
    where?: course_traineesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of course_trainees to fetch.
     */
    orderBy?: course_traineesOrderByWithRelationInput | course_traineesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: course_traineesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` course_trainees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` course_trainees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned course_trainees
    **/
    _count?: true | Course_traineesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Course_traineesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Course_traineesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Course_traineesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Course_traineesMaxAggregateInputType
  }

  export type GetCourse_traineesAggregateType<T extends Course_traineesAggregateArgs> = {
        [P in keyof T & keyof AggregateCourse_trainees]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCourse_trainees[P]>
      : GetScalarType<T[P], AggregateCourse_trainees[P]>
  }




  export type course_traineesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: course_traineesWhereInput
    orderBy?: course_traineesOrderByWithAggregationInput | course_traineesOrderByWithAggregationInput[]
    by: Course_traineesScalarFieldEnum[] | Course_traineesScalarFieldEnum
    having?: course_traineesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Course_traineesCountAggregateInputType | true
    _avg?: Course_traineesAvgAggregateInputType
    _sum?: Course_traineesSumAggregateInputType
    _min?: Course_traineesMinAggregateInputType
    _max?: Course_traineesMaxAggregateInputType
  }

  export type Course_traineesGroupByOutputType = {
    course_id: number
    trainee_id: number
    _count: Course_traineesCountAggregateOutputType | null
    _avg: Course_traineesAvgAggregateOutputType | null
    _sum: Course_traineesSumAggregateOutputType | null
    _min: Course_traineesMinAggregateOutputType | null
    _max: Course_traineesMaxAggregateOutputType | null
  }

  type GetCourse_traineesGroupByPayload<T extends course_traineesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Course_traineesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Course_traineesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Course_traineesGroupByOutputType[P]>
            : GetScalarType<T[P], Course_traineesGroupByOutputType[P]>
        }
      >
    >


  export type course_traineesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    course_id?: boolean
    trainee_id?: boolean
    courses?: boolean | coursesDefaultArgs<ExtArgs>
    users?: boolean | usersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["course_trainees"]>

  export type course_traineesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    course_id?: boolean
    trainee_id?: boolean
    courses?: boolean | coursesDefaultArgs<ExtArgs>
    users?: boolean | usersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["course_trainees"]>

  export type course_traineesSelectScalar = {
    course_id?: boolean
    trainee_id?: boolean
  }

  export type course_traineesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    courses?: boolean | coursesDefaultArgs<ExtArgs>
    users?: boolean | usersDefaultArgs<ExtArgs>
  }
  export type course_traineesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    courses?: boolean | coursesDefaultArgs<ExtArgs>
    users?: boolean | usersDefaultArgs<ExtArgs>
  }

  export type $course_traineesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "course_trainees"
    objects: {
      courses: Prisma.$coursesPayload<ExtArgs>
      users: Prisma.$usersPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      course_id: number
      trainee_id: number
    }, ExtArgs["result"]["course_trainees"]>
    composites: {}
  }

  type course_traineesGetPayload<S extends boolean | null | undefined | course_traineesDefaultArgs> = $Result.GetResult<Prisma.$course_traineesPayload, S>

  type course_traineesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<course_traineesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Course_traineesCountAggregateInputType | true
    }

  export interface course_traineesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['course_trainees'], meta: { name: 'course_trainees' } }
    /**
     * Find zero or one Course_trainees that matches the filter.
     * @param {course_traineesFindUniqueArgs} args - Arguments to find a Course_trainees
     * @example
     * // Get one Course_trainees
     * const course_trainees = await prisma.course_trainees.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends course_traineesFindUniqueArgs>(args: SelectSubset<T, course_traineesFindUniqueArgs<ExtArgs>>): Prisma__course_traineesClient<$Result.GetResult<Prisma.$course_traineesPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Course_trainees that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {course_traineesFindUniqueOrThrowArgs} args - Arguments to find a Course_trainees
     * @example
     * // Get one Course_trainees
     * const course_trainees = await prisma.course_trainees.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends course_traineesFindUniqueOrThrowArgs>(args: SelectSubset<T, course_traineesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__course_traineesClient<$Result.GetResult<Prisma.$course_traineesPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Course_trainees that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {course_traineesFindFirstArgs} args - Arguments to find a Course_trainees
     * @example
     * // Get one Course_trainees
     * const course_trainees = await prisma.course_trainees.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends course_traineesFindFirstArgs>(args?: SelectSubset<T, course_traineesFindFirstArgs<ExtArgs>>): Prisma__course_traineesClient<$Result.GetResult<Prisma.$course_traineesPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Course_trainees that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {course_traineesFindFirstOrThrowArgs} args - Arguments to find a Course_trainees
     * @example
     * // Get one Course_trainees
     * const course_trainees = await prisma.course_trainees.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends course_traineesFindFirstOrThrowArgs>(args?: SelectSubset<T, course_traineesFindFirstOrThrowArgs<ExtArgs>>): Prisma__course_traineesClient<$Result.GetResult<Prisma.$course_traineesPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Course_trainees that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {course_traineesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Course_trainees
     * const course_trainees = await prisma.course_trainees.findMany()
     * 
     * // Get first 10 Course_trainees
     * const course_trainees = await prisma.course_trainees.findMany({ take: 10 })
     * 
     * // Only select the `course_id`
     * const course_traineesWithCourse_idOnly = await prisma.course_trainees.findMany({ select: { course_id: true } })
     * 
     */
    findMany<T extends course_traineesFindManyArgs>(args?: SelectSubset<T, course_traineesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$course_traineesPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Course_trainees.
     * @param {course_traineesCreateArgs} args - Arguments to create a Course_trainees.
     * @example
     * // Create one Course_trainees
     * const Course_trainees = await prisma.course_trainees.create({
     *   data: {
     *     // ... data to create a Course_trainees
     *   }
     * })
     * 
     */
    create<T extends course_traineesCreateArgs>(args: SelectSubset<T, course_traineesCreateArgs<ExtArgs>>): Prisma__course_traineesClient<$Result.GetResult<Prisma.$course_traineesPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Course_trainees.
     * @param {course_traineesCreateManyArgs} args - Arguments to create many Course_trainees.
     * @example
     * // Create many Course_trainees
     * const course_trainees = await prisma.course_trainees.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends course_traineesCreateManyArgs>(args?: SelectSubset<T, course_traineesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Course_trainees and returns the data saved in the database.
     * @param {course_traineesCreateManyAndReturnArgs} args - Arguments to create many Course_trainees.
     * @example
     * // Create many Course_trainees
     * const course_trainees = await prisma.course_trainees.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Course_trainees and only return the `course_id`
     * const course_traineesWithCourse_idOnly = await prisma.course_trainees.createManyAndReturn({ 
     *   select: { course_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends course_traineesCreateManyAndReturnArgs>(args?: SelectSubset<T, course_traineesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$course_traineesPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Course_trainees.
     * @param {course_traineesDeleteArgs} args - Arguments to delete one Course_trainees.
     * @example
     * // Delete one Course_trainees
     * const Course_trainees = await prisma.course_trainees.delete({
     *   where: {
     *     // ... filter to delete one Course_trainees
     *   }
     * })
     * 
     */
    delete<T extends course_traineesDeleteArgs>(args: SelectSubset<T, course_traineesDeleteArgs<ExtArgs>>): Prisma__course_traineesClient<$Result.GetResult<Prisma.$course_traineesPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Course_trainees.
     * @param {course_traineesUpdateArgs} args - Arguments to update one Course_trainees.
     * @example
     * // Update one Course_trainees
     * const course_trainees = await prisma.course_trainees.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends course_traineesUpdateArgs>(args: SelectSubset<T, course_traineesUpdateArgs<ExtArgs>>): Prisma__course_traineesClient<$Result.GetResult<Prisma.$course_traineesPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Course_trainees.
     * @param {course_traineesDeleteManyArgs} args - Arguments to filter Course_trainees to delete.
     * @example
     * // Delete a few Course_trainees
     * const { count } = await prisma.course_trainees.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends course_traineesDeleteManyArgs>(args?: SelectSubset<T, course_traineesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Course_trainees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {course_traineesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Course_trainees
     * const course_trainees = await prisma.course_trainees.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends course_traineesUpdateManyArgs>(args: SelectSubset<T, course_traineesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Course_trainees.
     * @param {course_traineesUpsertArgs} args - Arguments to update or create a Course_trainees.
     * @example
     * // Update or create a Course_trainees
     * const course_trainees = await prisma.course_trainees.upsert({
     *   create: {
     *     // ... data to create a Course_trainees
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Course_trainees we want to update
     *   }
     * })
     */
    upsert<T extends course_traineesUpsertArgs>(args: SelectSubset<T, course_traineesUpsertArgs<ExtArgs>>): Prisma__course_traineesClient<$Result.GetResult<Prisma.$course_traineesPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Course_trainees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {course_traineesCountArgs} args - Arguments to filter Course_trainees to count.
     * @example
     * // Count the number of Course_trainees
     * const count = await prisma.course_trainees.count({
     *   where: {
     *     // ... the filter for the Course_trainees we want to count
     *   }
     * })
    **/
    count<T extends course_traineesCountArgs>(
      args?: Subset<T, course_traineesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Course_traineesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Course_trainees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Course_traineesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Course_traineesAggregateArgs>(args: Subset<T, Course_traineesAggregateArgs>): Prisma.PrismaPromise<GetCourse_traineesAggregateType<T>>

    /**
     * Group by Course_trainees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {course_traineesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends course_traineesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: course_traineesGroupByArgs['orderBy'] }
        : { orderBy?: course_traineesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, course_traineesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCourse_traineesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the course_trainees model
   */
  readonly fields: course_traineesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for course_trainees.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__course_traineesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    courses<T extends coursesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, coursesDefaultArgs<ExtArgs>>): Prisma__coursesClient<$Result.GetResult<Prisma.$coursesPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    users<T extends usersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usersDefaultArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the course_trainees model
   */ 
  interface course_traineesFieldRefs {
    readonly course_id: FieldRef<"course_trainees", 'Int'>
    readonly trainee_id: FieldRef<"course_trainees", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * course_trainees findUnique
   */
  export type course_traineesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the course_trainees
     */
    select?: course_traineesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: course_traineesInclude<ExtArgs> | null
    /**
     * Filter, which course_trainees to fetch.
     */
    where: course_traineesWhereUniqueInput
  }

  /**
   * course_trainees findUniqueOrThrow
   */
  export type course_traineesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the course_trainees
     */
    select?: course_traineesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: course_traineesInclude<ExtArgs> | null
    /**
     * Filter, which course_trainees to fetch.
     */
    where: course_traineesWhereUniqueInput
  }

  /**
   * course_trainees findFirst
   */
  export type course_traineesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the course_trainees
     */
    select?: course_traineesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: course_traineesInclude<ExtArgs> | null
    /**
     * Filter, which course_trainees to fetch.
     */
    where?: course_traineesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of course_trainees to fetch.
     */
    orderBy?: course_traineesOrderByWithRelationInput | course_traineesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for course_trainees.
     */
    cursor?: course_traineesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` course_trainees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` course_trainees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of course_trainees.
     */
    distinct?: Course_traineesScalarFieldEnum | Course_traineesScalarFieldEnum[]
  }

  /**
   * course_trainees findFirstOrThrow
   */
  export type course_traineesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the course_trainees
     */
    select?: course_traineesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: course_traineesInclude<ExtArgs> | null
    /**
     * Filter, which course_trainees to fetch.
     */
    where?: course_traineesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of course_trainees to fetch.
     */
    orderBy?: course_traineesOrderByWithRelationInput | course_traineesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for course_trainees.
     */
    cursor?: course_traineesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` course_trainees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` course_trainees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of course_trainees.
     */
    distinct?: Course_traineesScalarFieldEnum | Course_traineesScalarFieldEnum[]
  }

  /**
   * course_trainees findMany
   */
  export type course_traineesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the course_trainees
     */
    select?: course_traineesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: course_traineesInclude<ExtArgs> | null
    /**
     * Filter, which course_trainees to fetch.
     */
    where?: course_traineesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of course_trainees to fetch.
     */
    orderBy?: course_traineesOrderByWithRelationInput | course_traineesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing course_trainees.
     */
    cursor?: course_traineesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` course_trainees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` course_trainees.
     */
    skip?: number
    distinct?: Course_traineesScalarFieldEnum | Course_traineesScalarFieldEnum[]
  }

  /**
   * course_trainees create
   */
  export type course_traineesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the course_trainees
     */
    select?: course_traineesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: course_traineesInclude<ExtArgs> | null
    /**
     * The data needed to create a course_trainees.
     */
    data: XOR<course_traineesCreateInput, course_traineesUncheckedCreateInput>
  }

  /**
   * course_trainees createMany
   */
  export type course_traineesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many course_trainees.
     */
    data: course_traineesCreateManyInput | course_traineesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * course_trainees createManyAndReturn
   */
  export type course_traineesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the course_trainees
     */
    select?: course_traineesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many course_trainees.
     */
    data: course_traineesCreateManyInput | course_traineesCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: course_traineesIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * course_trainees update
   */
  export type course_traineesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the course_trainees
     */
    select?: course_traineesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: course_traineesInclude<ExtArgs> | null
    /**
     * The data needed to update a course_trainees.
     */
    data: XOR<course_traineesUpdateInput, course_traineesUncheckedUpdateInput>
    /**
     * Choose, which course_trainees to update.
     */
    where: course_traineesWhereUniqueInput
  }

  /**
   * course_trainees updateMany
   */
  export type course_traineesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update course_trainees.
     */
    data: XOR<course_traineesUpdateManyMutationInput, course_traineesUncheckedUpdateManyInput>
    /**
     * Filter which course_trainees to update
     */
    where?: course_traineesWhereInput
  }

  /**
   * course_trainees upsert
   */
  export type course_traineesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the course_trainees
     */
    select?: course_traineesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: course_traineesInclude<ExtArgs> | null
    /**
     * The filter to search for the course_trainees to update in case it exists.
     */
    where: course_traineesWhereUniqueInput
    /**
     * In case the course_trainees found by the `where` argument doesn't exist, create a new course_trainees with this data.
     */
    create: XOR<course_traineesCreateInput, course_traineesUncheckedCreateInput>
    /**
     * In case the course_trainees was found with the provided `where` argument, update it with this data.
     */
    update: XOR<course_traineesUpdateInput, course_traineesUncheckedUpdateInput>
  }

  /**
   * course_trainees delete
   */
  export type course_traineesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the course_trainees
     */
    select?: course_traineesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: course_traineesInclude<ExtArgs> | null
    /**
     * Filter which course_trainees to delete.
     */
    where: course_traineesWhereUniqueInput
  }

  /**
   * course_trainees deleteMany
   */
  export type course_traineesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which course_trainees to delete
     */
    where?: course_traineesWhereInput
  }

  /**
   * course_trainees without action
   */
  export type course_traineesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the course_trainees
     */
    select?: course_traineesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: course_traineesInclude<ExtArgs> | null
  }


  /**
   * Model courses
   */

  export type AggregateCourses = {
    _count: CoursesCountAggregateOutputType | null
    _avg: CoursesAvgAggregateOutputType | null
    _sum: CoursesSumAggregateOutputType | null
    _min: CoursesMinAggregateOutputType | null
    _max: CoursesMaxAggregateOutputType | null
  }

  export type CoursesAvgAggregateOutputType = {
    id: number | null
    trainer_id: number | null
  }

  export type CoursesSumAggregateOutputType = {
    id: number | null
    trainer_id: number | null
  }

  export type CoursesMinAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    trainer_id: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type CoursesMaxAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    trainer_id: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type CoursesCountAggregateOutputType = {
    id: number
    title: number
    description: number
    trainer_id: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type CoursesAvgAggregateInputType = {
    id?: true
    trainer_id?: true
  }

  export type CoursesSumAggregateInputType = {
    id?: true
    trainer_id?: true
  }

  export type CoursesMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    trainer_id?: true
    created_at?: true
    updated_at?: true
  }

  export type CoursesMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    trainer_id?: true
    created_at?: true
    updated_at?: true
  }

  export type CoursesCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    trainer_id?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type CoursesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which courses to aggregate.
     */
    where?: coursesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of courses to fetch.
     */
    orderBy?: coursesOrderByWithRelationInput | coursesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: coursesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` courses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned courses
    **/
    _count?: true | CoursesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CoursesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CoursesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CoursesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CoursesMaxAggregateInputType
  }

  export type GetCoursesAggregateType<T extends CoursesAggregateArgs> = {
        [P in keyof T & keyof AggregateCourses]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCourses[P]>
      : GetScalarType<T[P], AggregateCourses[P]>
  }




  export type coursesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: coursesWhereInput
    orderBy?: coursesOrderByWithAggregationInput | coursesOrderByWithAggregationInput[]
    by: CoursesScalarFieldEnum[] | CoursesScalarFieldEnum
    having?: coursesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CoursesCountAggregateInputType | true
    _avg?: CoursesAvgAggregateInputType
    _sum?: CoursesSumAggregateInputType
    _min?: CoursesMinAggregateInputType
    _max?: CoursesMaxAggregateInputType
  }

  export type CoursesGroupByOutputType = {
    id: number
    title: string
    description: string | null
    trainer_id: number | null
    created_at: Date | null
    updated_at: Date | null
    _count: CoursesCountAggregateOutputType | null
    _avg: CoursesAvgAggregateOutputType | null
    _sum: CoursesSumAggregateOutputType | null
    _min: CoursesMinAggregateOutputType | null
    _max: CoursesMaxAggregateOutputType | null
  }

  type GetCoursesGroupByPayload<T extends coursesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CoursesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CoursesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CoursesGroupByOutputType[P]>
            : GetScalarType<T[P], CoursesGroupByOutputType[P]>
        }
      >
    >


  export type coursesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    trainer_id?: boolean
    created_at?: boolean
    updated_at?: boolean
    course_trainees?: boolean | courses$course_traineesArgs<ExtArgs>
    users?: boolean | courses$usersArgs<ExtArgs>
    modules?: boolean | courses$modulesArgs<ExtArgs>
    progress?: boolean | courses$progressArgs<ExtArgs>
    _count?: boolean | CoursesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["courses"]>

  export type coursesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    trainer_id?: boolean
    created_at?: boolean
    updated_at?: boolean
    users?: boolean | courses$usersArgs<ExtArgs>
  }, ExtArgs["result"]["courses"]>

  export type coursesSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    trainer_id?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type coursesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    course_trainees?: boolean | courses$course_traineesArgs<ExtArgs>
    users?: boolean | courses$usersArgs<ExtArgs>
    modules?: boolean | courses$modulesArgs<ExtArgs>
    progress?: boolean | courses$progressArgs<ExtArgs>
    _count?: boolean | CoursesCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type coursesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | courses$usersArgs<ExtArgs>
  }

  export type $coursesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "courses"
    objects: {
      course_trainees: Prisma.$course_traineesPayload<ExtArgs>[]
      users: Prisma.$usersPayload<ExtArgs> | null
      modules: Prisma.$modulesPayload<ExtArgs>[]
      progress: Prisma.$progressPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      description: string | null
      trainer_id: number | null
      created_at: Date | null
      updated_at: Date | null
    }, ExtArgs["result"]["courses"]>
    composites: {}
  }

  type coursesGetPayload<S extends boolean | null | undefined | coursesDefaultArgs> = $Result.GetResult<Prisma.$coursesPayload, S>

  type coursesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<coursesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CoursesCountAggregateInputType | true
    }

  export interface coursesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['courses'], meta: { name: 'courses' } }
    /**
     * Find zero or one Courses that matches the filter.
     * @param {coursesFindUniqueArgs} args - Arguments to find a Courses
     * @example
     * // Get one Courses
     * const courses = await prisma.courses.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends coursesFindUniqueArgs>(args: SelectSubset<T, coursesFindUniqueArgs<ExtArgs>>): Prisma__coursesClient<$Result.GetResult<Prisma.$coursesPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Courses that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {coursesFindUniqueOrThrowArgs} args - Arguments to find a Courses
     * @example
     * // Get one Courses
     * const courses = await prisma.courses.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends coursesFindUniqueOrThrowArgs>(args: SelectSubset<T, coursesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__coursesClient<$Result.GetResult<Prisma.$coursesPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Courses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {coursesFindFirstArgs} args - Arguments to find a Courses
     * @example
     * // Get one Courses
     * const courses = await prisma.courses.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends coursesFindFirstArgs>(args?: SelectSubset<T, coursesFindFirstArgs<ExtArgs>>): Prisma__coursesClient<$Result.GetResult<Prisma.$coursesPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Courses that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {coursesFindFirstOrThrowArgs} args - Arguments to find a Courses
     * @example
     * // Get one Courses
     * const courses = await prisma.courses.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends coursesFindFirstOrThrowArgs>(args?: SelectSubset<T, coursesFindFirstOrThrowArgs<ExtArgs>>): Prisma__coursesClient<$Result.GetResult<Prisma.$coursesPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Courses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {coursesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Courses
     * const courses = await prisma.courses.findMany()
     * 
     * // Get first 10 Courses
     * const courses = await prisma.courses.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const coursesWithIdOnly = await prisma.courses.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends coursesFindManyArgs>(args?: SelectSubset<T, coursesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$coursesPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Courses.
     * @param {coursesCreateArgs} args - Arguments to create a Courses.
     * @example
     * // Create one Courses
     * const Courses = await prisma.courses.create({
     *   data: {
     *     // ... data to create a Courses
     *   }
     * })
     * 
     */
    create<T extends coursesCreateArgs>(args: SelectSubset<T, coursesCreateArgs<ExtArgs>>): Prisma__coursesClient<$Result.GetResult<Prisma.$coursesPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Courses.
     * @param {coursesCreateManyArgs} args - Arguments to create many Courses.
     * @example
     * // Create many Courses
     * const courses = await prisma.courses.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends coursesCreateManyArgs>(args?: SelectSubset<T, coursesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Courses and returns the data saved in the database.
     * @param {coursesCreateManyAndReturnArgs} args - Arguments to create many Courses.
     * @example
     * // Create many Courses
     * const courses = await prisma.courses.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Courses and only return the `id`
     * const coursesWithIdOnly = await prisma.courses.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends coursesCreateManyAndReturnArgs>(args?: SelectSubset<T, coursesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$coursesPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Courses.
     * @param {coursesDeleteArgs} args - Arguments to delete one Courses.
     * @example
     * // Delete one Courses
     * const Courses = await prisma.courses.delete({
     *   where: {
     *     // ... filter to delete one Courses
     *   }
     * })
     * 
     */
    delete<T extends coursesDeleteArgs>(args: SelectSubset<T, coursesDeleteArgs<ExtArgs>>): Prisma__coursesClient<$Result.GetResult<Prisma.$coursesPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Courses.
     * @param {coursesUpdateArgs} args - Arguments to update one Courses.
     * @example
     * // Update one Courses
     * const courses = await prisma.courses.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends coursesUpdateArgs>(args: SelectSubset<T, coursesUpdateArgs<ExtArgs>>): Prisma__coursesClient<$Result.GetResult<Prisma.$coursesPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Courses.
     * @param {coursesDeleteManyArgs} args - Arguments to filter Courses to delete.
     * @example
     * // Delete a few Courses
     * const { count } = await prisma.courses.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends coursesDeleteManyArgs>(args?: SelectSubset<T, coursesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Courses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {coursesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Courses
     * const courses = await prisma.courses.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends coursesUpdateManyArgs>(args: SelectSubset<T, coursesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Courses.
     * @param {coursesUpsertArgs} args - Arguments to update or create a Courses.
     * @example
     * // Update or create a Courses
     * const courses = await prisma.courses.upsert({
     *   create: {
     *     // ... data to create a Courses
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Courses we want to update
     *   }
     * })
     */
    upsert<T extends coursesUpsertArgs>(args: SelectSubset<T, coursesUpsertArgs<ExtArgs>>): Prisma__coursesClient<$Result.GetResult<Prisma.$coursesPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Courses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {coursesCountArgs} args - Arguments to filter Courses to count.
     * @example
     * // Count the number of Courses
     * const count = await prisma.courses.count({
     *   where: {
     *     // ... the filter for the Courses we want to count
     *   }
     * })
    **/
    count<T extends coursesCountArgs>(
      args?: Subset<T, coursesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CoursesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Courses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoursesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CoursesAggregateArgs>(args: Subset<T, CoursesAggregateArgs>): Prisma.PrismaPromise<GetCoursesAggregateType<T>>

    /**
     * Group by Courses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {coursesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends coursesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: coursesGroupByArgs['orderBy'] }
        : { orderBy?: coursesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, coursesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCoursesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the courses model
   */
  readonly fields: coursesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for courses.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__coursesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    course_trainees<T extends courses$course_traineesArgs<ExtArgs> = {}>(args?: Subset<T, courses$course_traineesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$course_traineesPayload<ExtArgs>, T, "findMany"> | Null>
    users<T extends courses$usersArgs<ExtArgs> = {}>(args?: Subset<T, courses$usersArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    modules<T extends courses$modulesArgs<ExtArgs> = {}>(args?: Subset<T, courses$modulesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$modulesPayload<ExtArgs>, T, "findMany"> | Null>
    progress<T extends courses$progressArgs<ExtArgs> = {}>(args?: Subset<T, courses$progressArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$progressPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the courses model
   */ 
  interface coursesFieldRefs {
    readonly id: FieldRef<"courses", 'Int'>
    readonly title: FieldRef<"courses", 'String'>
    readonly description: FieldRef<"courses", 'String'>
    readonly trainer_id: FieldRef<"courses", 'Int'>
    readonly created_at: FieldRef<"courses", 'DateTime'>
    readonly updated_at: FieldRef<"courses", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * courses findUnique
   */
  export type coursesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the courses
     */
    select?: coursesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: coursesInclude<ExtArgs> | null
    /**
     * Filter, which courses to fetch.
     */
    where: coursesWhereUniqueInput
  }

  /**
   * courses findUniqueOrThrow
   */
  export type coursesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the courses
     */
    select?: coursesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: coursesInclude<ExtArgs> | null
    /**
     * Filter, which courses to fetch.
     */
    where: coursesWhereUniqueInput
  }

  /**
   * courses findFirst
   */
  export type coursesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the courses
     */
    select?: coursesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: coursesInclude<ExtArgs> | null
    /**
     * Filter, which courses to fetch.
     */
    where?: coursesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of courses to fetch.
     */
    orderBy?: coursesOrderByWithRelationInput | coursesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for courses.
     */
    cursor?: coursesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` courses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of courses.
     */
    distinct?: CoursesScalarFieldEnum | CoursesScalarFieldEnum[]
  }

  /**
   * courses findFirstOrThrow
   */
  export type coursesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the courses
     */
    select?: coursesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: coursesInclude<ExtArgs> | null
    /**
     * Filter, which courses to fetch.
     */
    where?: coursesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of courses to fetch.
     */
    orderBy?: coursesOrderByWithRelationInput | coursesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for courses.
     */
    cursor?: coursesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` courses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of courses.
     */
    distinct?: CoursesScalarFieldEnum | CoursesScalarFieldEnum[]
  }

  /**
   * courses findMany
   */
  export type coursesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the courses
     */
    select?: coursesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: coursesInclude<ExtArgs> | null
    /**
     * Filter, which courses to fetch.
     */
    where?: coursesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of courses to fetch.
     */
    orderBy?: coursesOrderByWithRelationInput | coursesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing courses.
     */
    cursor?: coursesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` courses.
     */
    skip?: number
    distinct?: CoursesScalarFieldEnum | CoursesScalarFieldEnum[]
  }

  /**
   * courses create
   */
  export type coursesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the courses
     */
    select?: coursesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: coursesInclude<ExtArgs> | null
    /**
     * The data needed to create a courses.
     */
    data: XOR<coursesCreateInput, coursesUncheckedCreateInput>
  }

  /**
   * courses createMany
   */
  export type coursesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many courses.
     */
    data: coursesCreateManyInput | coursesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * courses createManyAndReturn
   */
  export type coursesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the courses
     */
    select?: coursesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many courses.
     */
    data: coursesCreateManyInput | coursesCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: coursesIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * courses update
   */
  export type coursesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the courses
     */
    select?: coursesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: coursesInclude<ExtArgs> | null
    /**
     * The data needed to update a courses.
     */
    data: XOR<coursesUpdateInput, coursesUncheckedUpdateInput>
    /**
     * Choose, which courses to update.
     */
    where: coursesWhereUniqueInput
  }

  /**
   * courses updateMany
   */
  export type coursesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update courses.
     */
    data: XOR<coursesUpdateManyMutationInput, coursesUncheckedUpdateManyInput>
    /**
     * Filter which courses to update
     */
    where?: coursesWhereInput
  }

  /**
   * courses upsert
   */
  export type coursesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the courses
     */
    select?: coursesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: coursesInclude<ExtArgs> | null
    /**
     * The filter to search for the courses to update in case it exists.
     */
    where: coursesWhereUniqueInput
    /**
     * In case the courses found by the `where` argument doesn't exist, create a new courses with this data.
     */
    create: XOR<coursesCreateInput, coursesUncheckedCreateInput>
    /**
     * In case the courses was found with the provided `where` argument, update it with this data.
     */
    update: XOR<coursesUpdateInput, coursesUncheckedUpdateInput>
  }

  /**
   * courses delete
   */
  export type coursesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the courses
     */
    select?: coursesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: coursesInclude<ExtArgs> | null
    /**
     * Filter which courses to delete.
     */
    where: coursesWhereUniqueInput
  }

  /**
   * courses deleteMany
   */
  export type coursesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which courses to delete
     */
    where?: coursesWhereInput
  }

  /**
   * courses.course_trainees
   */
  export type courses$course_traineesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the course_trainees
     */
    select?: course_traineesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: course_traineesInclude<ExtArgs> | null
    where?: course_traineesWhereInput
    orderBy?: course_traineesOrderByWithRelationInput | course_traineesOrderByWithRelationInput[]
    cursor?: course_traineesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Course_traineesScalarFieldEnum | Course_traineesScalarFieldEnum[]
  }

  /**
   * courses.users
   */
  export type courses$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    where?: usersWhereInput
  }

  /**
   * courses.modules
   */
  export type courses$modulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the modules
     */
    select?: modulesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: modulesInclude<ExtArgs> | null
    where?: modulesWhereInput
    orderBy?: modulesOrderByWithRelationInput | modulesOrderByWithRelationInput[]
    cursor?: modulesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ModulesScalarFieldEnum | ModulesScalarFieldEnum[]
  }

  /**
   * courses.progress
   */
  export type courses$progressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the progress
     */
    select?: progressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: progressInclude<ExtArgs> | null
    where?: progressWhereInput
    orderBy?: progressOrderByWithRelationInput | progressOrderByWithRelationInput[]
    cursor?: progressWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProgressScalarFieldEnum | ProgressScalarFieldEnum[]
  }

  /**
   * courses without action
   */
  export type coursesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the courses
     */
    select?: coursesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: coursesInclude<ExtArgs> | null
  }


  /**
   * Model modules
   */

  export type AggregateModules = {
    _count: ModulesCountAggregateOutputType | null
    _avg: ModulesAvgAggregateOutputType | null
    _sum: ModulesSumAggregateOutputType | null
    _min: ModulesMinAggregateOutputType | null
    _max: ModulesMaxAggregateOutputType | null
  }

  export type ModulesAvgAggregateOutputType = {
    id: number | null
    course_id: number | null
  }

  export type ModulesSumAggregateOutputType = {
    id: number | null
    course_id: number | null
  }

  export type ModulesMinAggregateOutputType = {
    id: number | null
    title: string | null
    course_id: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type ModulesMaxAggregateOutputType = {
    id: number | null
    title: string | null
    course_id: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type ModulesCountAggregateOutputType = {
    id: number
    title: number
    course_id: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type ModulesAvgAggregateInputType = {
    id?: true
    course_id?: true
  }

  export type ModulesSumAggregateInputType = {
    id?: true
    course_id?: true
  }

  export type ModulesMinAggregateInputType = {
    id?: true
    title?: true
    course_id?: true
    created_at?: true
    updated_at?: true
  }

  export type ModulesMaxAggregateInputType = {
    id?: true
    title?: true
    course_id?: true
    created_at?: true
    updated_at?: true
  }

  export type ModulesCountAggregateInputType = {
    id?: true
    title?: true
    course_id?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type ModulesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which modules to aggregate.
     */
    where?: modulesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of modules to fetch.
     */
    orderBy?: modulesOrderByWithRelationInput | modulesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: modulesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` modules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` modules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned modules
    **/
    _count?: true | ModulesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ModulesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ModulesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ModulesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ModulesMaxAggregateInputType
  }

  export type GetModulesAggregateType<T extends ModulesAggregateArgs> = {
        [P in keyof T & keyof AggregateModules]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateModules[P]>
      : GetScalarType<T[P], AggregateModules[P]>
  }




  export type modulesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: modulesWhereInput
    orderBy?: modulesOrderByWithAggregationInput | modulesOrderByWithAggregationInput[]
    by: ModulesScalarFieldEnum[] | ModulesScalarFieldEnum
    having?: modulesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ModulesCountAggregateInputType | true
    _avg?: ModulesAvgAggregateInputType
    _sum?: ModulesSumAggregateInputType
    _min?: ModulesMinAggregateInputType
    _max?: ModulesMaxAggregateInputType
  }

  export type ModulesGroupByOutputType = {
    id: number
    title: string
    course_id: number | null
    created_at: Date | null
    updated_at: Date | null
    _count: ModulesCountAggregateOutputType | null
    _avg: ModulesAvgAggregateOutputType | null
    _sum: ModulesSumAggregateOutputType | null
    _min: ModulesMinAggregateOutputType | null
    _max: ModulesMaxAggregateOutputType | null
  }

  type GetModulesGroupByPayload<T extends modulesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ModulesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ModulesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ModulesGroupByOutputType[P]>
            : GetScalarType<T[P], ModulesGroupByOutputType[P]>
        }
      >
    >


  export type modulesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    course_id?: boolean
    created_at?: boolean
    updated_at?: boolean
    courses?: boolean | modules$coursesArgs<ExtArgs>
    progress?: boolean | modules$progressArgs<ExtArgs>
    _count?: boolean | ModulesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["modules"]>

  export type modulesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    course_id?: boolean
    created_at?: boolean
    updated_at?: boolean
    courses?: boolean | modules$coursesArgs<ExtArgs>
  }, ExtArgs["result"]["modules"]>

  export type modulesSelectScalar = {
    id?: boolean
    title?: boolean
    course_id?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type modulesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    courses?: boolean | modules$coursesArgs<ExtArgs>
    progress?: boolean | modules$progressArgs<ExtArgs>
    _count?: boolean | ModulesCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type modulesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    courses?: boolean | modules$coursesArgs<ExtArgs>
  }

  export type $modulesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "modules"
    objects: {
      courses: Prisma.$coursesPayload<ExtArgs> | null
      progress: Prisma.$progressPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      course_id: number | null
      created_at: Date | null
      updated_at: Date | null
    }, ExtArgs["result"]["modules"]>
    composites: {}
  }

  type modulesGetPayload<S extends boolean | null | undefined | modulesDefaultArgs> = $Result.GetResult<Prisma.$modulesPayload, S>

  type modulesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<modulesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ModulesCountAggregateInputType | true
    }

  export interface modulesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['modules'], meta: { name: 'modules' } }
    /**
     * Find zero or one Modules that matches the filter.
     * @param {modulesFindUniqueArgs} args - Arguments to find a Modules
     * @example
     * // Get one Modules
     * const modules = await prisma.modules.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends modulesFindUniqueArgs>(args: SelectSubset<T, modulesFindUniqueArgs<ExtArgs>>): Prisma__modulesClient<$Result.GetResult<Prisma.$modulesPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Modules that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {modulesFindUniqueOrThrowArgs} args - Arguments to find a Modules
     * @example
     * // Get one Modules
     * const modules = await prisma.modules.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends modulesFindUniqueOrThrowArgs>(args: SelectSubset<T, modulesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__modulesClient<$Result.GetResult<Prisma.$modulesPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Modules that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {modulesFindFirstArgs} args - Arguments to find a Modules
     * @example
     * // Get one Modules
     * const modules = await prisma.modules.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends modulesFindFirstArgs>(args?: SelectSubset<T, modulesFindFirstArgs<ExtArgs>>): Prisma__modulesClient<$Result.GetResult<Prisma.$modulesPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Modules that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {modulesFindFirstOrThrowArgs} args - Arguments to find a Modules
     * @example
     * // Get one Modules
     * const modules = await prisma.modules.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends modulesFindFirstOrThrowArgs>(args?: SelectSubset<T, modulesFindFirstOrThrowArgs<ExtArgs>>): Prisma__modulesClient<$Result.GetResult<Prisma.$modulesPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Modules that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {modulesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Modules
     * const modules = await prisma.modules.findMany()
     * 
     * // Get first 10 Modules
     * const modules = await prisma.modules.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const modulesWithIdOnly = await prisma.modules.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends modulesFindManyArgs>(args?: SelectSubset<T, modulesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$modulesPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Modules.
     * @param {modulesCreateArgs} args - Arguments to create a Modules.
     * @example
     * // Create one Modules
     * const Modules = await prisma.modules.create({
     *   data: {
     *     // ... data to create a Modules
     *   }
     * })
     * 
     */
    create<T extends modulesCreateArgs>(args: SelectSubset<T, modulesCreateArgs<ExtArgs>>): Prisma__modulesClient<$Result.GetResult<Prisma.$modulesPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Modules.
     * @param {modulesCreateManyArgs} args - Arguments to create many Modules.
     * @example
     * // Create many Modules
     * const modules = await prisma.modules.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends modulesCreateManyArgs>(args?: SelectSubset<T, modulesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Modules and returns the data saved in the database.
     * @param {modulesCreateManyAndReturnArgs} args - Arguments to create many Modules.
     * @example
     * // Create many Modules
     * const modules = await prisma.modules.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Modules and only return the `id`
     * const modulesWithIdOnly = await prisma.modules.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends modulesCreateManyAndReturnArgs>(args?: SelectSubset<T, modulesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$modulesPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Modules.
     * @param {modulesDeleteArgs} args - Arguments to delete one Modules.
     * @example
     * // Delete one Modules
     * const Modules = await prisma.modules.delete({
     *   where: {
     *     // ... filter to delete one Modules
     *   }
     * })
     * 
     */
    delete<T extends modulesDeleteArgs>(args: SelectSubset<T, modulesDeleteArgs<ExtArgs>>): Prisma__modulesClient<$Result.GetResult<Prisma.$modulesPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Modules.
     * @param {modulesUpdateArgs} args - Arguments to update one Modules.
     * @example
     * // Update one Modules
     * const modules = await prisma.modules.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends modulesUpdateArgs>(args: SelectSubset<T, modulesUpdateArgs<ExtArgs>>): Prisma__modulesClient<$Result.GetResult<Prisma.$modulesPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Modules.
     * @param {modulesDeleteManyArgs} args - Arguments to filter Modules to delete.
     * @example
     * // Delete a few Modules
     * const { count } = await prisma.modules.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends modulesDeleteManyArgs>(args?: SelectSubset<T, modulesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Modules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {modulesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Modules
     * const modules = await prisma.modules.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends modulesUpdateManyArgs>(args: SelectSubset<T, modulesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Modules.
     * @param {modulesUpsertArgs} args - Arguments to update or create a Modules.
     * @example
     * // Update or create a Modules
     * const modules = await prisma.modules.upsert({
     *   create: {
     *     // ... data to create a Modules
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Modules we want to update
     *   }
     * })
     */
    upsert<T extends modulesUpsertArgs>(args: SelectSubset<T, modulesUpsertArgs<ExtArgs>>): Prisma__modulesClient<$Result.GetResult<Prisma.$modulesPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Modules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {modulesCountArgs} args - Arguments to filter Modules to count.
     * @example
     * // Count the number of Modules
     * const count = await prisma.modules.count({
     *   where: {
     *     // ... the filter for the Modules we want to count
     *   }
     * })
    **/
    count<T extends modulesCountArgs>(
      args?: Subset<T, modulesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ModulesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Modules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ModulesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ModulesAggregateArgs>(args: Subset<T, ModulesAggregateArgs>): Prisma.PrismaPromise<GetModulesAggregateType<T>>

    /**
     * Group by Modules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {modulesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends modulesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: modulesGroupByArgs['orderBy'] }
        : { orderBy?: modulesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, modulesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetModulesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the modules model
   */
  readonly fields: modulesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for modules.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__modulesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    courses<T extends modules$coursesArgs<ExtArgs> = {}>(args?: Subset<T, modules$coursesArgs<ExtArgs>>): Prisma__coursesClient<$Result.GetResult<Prisma.$coursesPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    progress<T extends modules$progressArgs<ExtArgs> = {}>(args?: Subset<T, modules$progressArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$progressPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the modules model
   */ 
  interface modulesFieldRefs {
    readonly id: FieldRef<"modules", 'Int'>
    readonly title: FieldRef<"modules", 'String'>
    readonly course_id: FieldRef<"modules", 'Int'>
    readonly created_at: FieldRef<"modules", 'DateTime'>
    readonly updated_at: FieldRef<"modules", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * modules findUnique
   */
  export type modulesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the modules
     */
    select?: modulesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: modulesInclude<ExtArgs> | null
    /**
     * Filter, which modules to fetch.
     */
    where: modulesWhereUniqueInput
  }

  /**
   * modules findUniqueOrThrow
   */
  export type modulesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the modules
     */
    select?: modulesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: modulesInclude<ExtArgs> | null
    /**
     * Filter, which modules to fetch.
     */
    where: modulesWhereUniqueInput
  }

  /**
   * modules findFirst
   */
  export type modulesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the modules
     */
    select?: modulesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: modulesInclude<ExtArgs> | null
    /**
     * Filter, which modules to fetch.
     */
    where?: modulesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of modules to fetch.
     */
    orderBy?: modulesOrderByWithRelationInput | modulesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for modules.
     */
    cursor?: modulesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` modules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` modules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of modules.
     */
    distinct?: ModulesScalarFieldEnum | ModulesScalarFieldEnum[]
  }

  /**
   * modules findFirstOrThrow
   */
  export type modulesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the modules
     */
    select?: modulesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: modulesInclude<ExtArgs> | null
    /**
     * Filter, which modules to fetch.
     */
    where?: modulesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of modules to fetch.
     */
    orderBy?: modulesOrderByWithRelationInput | modulesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for modules.
     */
    cursor?: modulesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` modules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` modules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of modules.
     */
    distinct?: ModulesScalarFieldEnum | ModulesScalarFieldEnum[]
  }

  /**
   * modules findMany
   */
  export type modulesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the modules
     */
    select?: modulesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: modulesInclude<ExtArgs> | null
    /**
     * Filter, which modules to fetch.
     */
    where?: modulesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of modules to fetch.
     */
    orderBy?: modulesOrderByWithRelationInput | modulesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing modules.
     */
    cursor?: modulesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` modules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` modules.
     */
    skip?: number
    distinct?: ModulesScalarFieldEnum | ModulesScalarFieldEnum[]
  }

  /**
   * modules create
   */
  export type modulesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the modules
     */
    select?: modulesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: modulesInclude<ExtArgs> | null
    /**
     * The data needed to create a modules.
     */
    data: XOR<modulesCreateInput, modulesUncheckedCreateInput>
  }

  /**
   * modules createMany
   */
  export type modulesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many modules.
     */
    data: modulesCreateManyInput | modulesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * modules createManyAndReturn
   */
  export type modulesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the modules
     */
    select?: modulesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many modules.
     */
    data: modulesCreateManyInput | modulesCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: modulesIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * modules update
   */
  export type modulesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the modules
     */
    select?: modulesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: modulesInclude<ExtArgs> | null
    /**
     * The data needed to update a modules.
     */
    data: XOR<modulesUpdateInput, modulesUncheckedUpdateInput>
    /**
     * Choose, which modules to update.
     */
    where: modulesWhereUniqueInput
  }

  /**
   * modules updateMany
   */
  export type modulesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update modules.
     */
    data: XOR<modulesUpdateManyMutationInput, modulesUncheckedUpdateManyInput>
    /**
     * Filter which modules to update
     */
    where?: modulesWhereInput
  }

  /**
   * modules upsert
   */
  export type modulesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the modules
     */
    select?: modulesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: modulesInclude<ExtArgs> | null
    /**
     * The filter to search for the modules to update in case it exists.
     */
    where: modulesWhereUniqueInput
    /**
     * In case the modules found by the `where` argument doesn't exist, create a new modules with this data.
     */
    create: XOR<modulesCreateInput, modulesUncheckedCreateInput>
    /**
     * In case the modules was found with the provided `where` argument, update it with this data.
     */
    update: XOR<modulesUpdateInput, modulesUncheckedUpdateInput>
  }

  /**
   * modules delete
   */
  export type modulesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the modules
     */
    select?: modulesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: modulesInclude<ExtArgs> | null
    /**
     * Filter which modules to delete.
     */
    where: modulesWhereUniqueInput
  }

  /**
   * modules deleteMany
   */
  export type modulesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which modules to delete
     */
    where?: modulesWhereInput
  }

  /**
   * modules.courses
   */
  export type modules$coursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the courses
     */
    select?: coursesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: coursesInclude<ExtArgs> | null
    where?: coursesWhereInput
  }

  /**
   * modules.progress
   */
  export type modules$progressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the progress
     */
    select?: progressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: progressInclude<ExtArgs> | null
    where?: progressWhereInput
    orderBy?: progressOrderByWithRelationInput | progressOrderByWithRelationInput[]
    cursor?: progressWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProgressScalarFieldEnum | ProgressScalarFieldEnum[]
  }

  /**
   * modules without action
   */
  export type modulesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the modules
     */
    select?: modulesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: modulesInclude<ExtArgs> | null
  }


  /**
   * Model progress
   */

  export type AggregateProgress = {
    _count: ProgressCountAggregateOutputType | null
    _avg: ProgressAvgAggregateOutputType | null
    _sum: ProgressSumAggregateOutputType | null
    _min: ProgressMinAggregateOutputType | null
    _max: ProgressMaxAggregateOutputType | null
  }

  export type ProgressAvgAggregateOutputType = {
    id: number | null
    trainee_id: number | null
    course_id: number | null
    module_id: number | null
  }

  export type ProgressSumAggregateOutputType = {
    id: number | null
    trainee_id: number | null
    course_id: number | null
    module_id: number | null
  }

  export type ProgressMinAggregateOutputType = {
    id: number | null
    trainee_id: number | null
    course_id: number | null
    module_id: number | null
    status: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type ProgressMaxAggregateOutputType = {
    id: number | null
    trainee_id: number | null
    course_id: number | null
    module_id: number | null
    status: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type ProgressCountAggregateOutputType = {
    id: number
    trainee_id: number
    course_id: number
    module_id: number
    status: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type ProgressAvgAggregateInputType = {
    id?: true
    trainee_id?: true
    course_id?: true
    module_id?: true
  }

  export type ProgressSumAggregateInputType = {
    id?: true
    trainee_id?: true
    course_id?: true
    module_id?: true
  }

  export type ProgressMinAggregateInputType = {
    id?: true
    trainee_id?: true
    course_id?: true
    module_id?: true
    status?: true
    created_at?: true
    updated_at?: true
  }

  export type ProgressMaxAggregateInputType = {
    id?: true
    trainee_id?: true
    course_id?: true
    module_id?: true
    status?: true
    created_at?: true
    updated_at?: true
  }

  export type ProgressCountAggregateInputType = {
    id?: true
    trainee_id?: true
    course_id?: true
    module_id?: true
    status?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type ProgressAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which progress to aggregate.
     */
    where?: progressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of progresses to fetch.
     */
    orderBy?: progressOrderByWithRelationInput | progressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: progressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` progresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` progresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned progresses
    **/
    _count?: true | ProgressCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProgressAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProgressSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProgressMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProgressMaxAggregateInputType
  }

  export type GetProgressAggregateType<T extends ProgressAggregateArgs> = {
        [P in keyof T & keyof AggregateProgress]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProgress[P]>
      : GetScalarType<T[P], AggregateProgress[P]>
  }




  export type progressGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: progressWhereInput
    orderBy?: progressOrderByWithAggregationInput | progressOrderByWithAggregationInput[]
    by: ProgressScalarFieldEnum[] | ProgressScalarFieldEnum
    having?: progressScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProgressCountAggregateInputType | true
    _avg?: ProgressAvgAggregateInputType
    _sum?: ProgressSumAggregateInputType
    _min?: ProgressMinAggregateInputType
    _max?: ProgressMaxAggregateInputType
  }

  export type ProgressGroupByOutputType = {
    id: number
    trainee_id: number | null
    course_id: number | null
    module_id: number | null
    status: string | null
    created_at: Date | null
    updated_at: Date | null
    _count: ProgressCountAggregateOutputType | null
    _avg: ProgressAvgAggregateOutputType | null
    _sum: ProgressSumAggregateOutputType | null
    _min: ProgressMinAggregateOutputType | null
    _max: ProgressMaxAggregateOutputType | null
  }

  type GetProgressGroupByPayload<T extends progressGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProgressGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProgressGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProgressGroupByOutputType[P]>
            : GetScalarType<T[P], ProgressGroupByOutputType[P]>
        }
      >
    >


  export type progressSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    trainee_id?: boolean
    course_id?: boolean
    module_id?: boolean
    status?: boolean
    created_at?: boolean
    updated_at?: boolean
    courses?: boolean | progress$coursesArgs<ExtArgs>
    modules?: boolean | progress$modulesArgs<ExtArgs>
    users?: boolean | progress$usersArgs<ExtArgs>
  }, ExtArgs["result"]["progress"]>

  export type progressSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    trainee_id?: boolean
    course_id?: boolean
    module_id?: boolean
    status?: boolean
    created_at?: boolean
    updated_at?: boolean
    courses?: boolean | progress$coursesArgs<ExtArgs>
    modules?: boolean | progress$modulesArgs<ExtArgs>
    users?: boolean | progress$usersArgs<ExtArgs>
  }, ExtArgs["result"]["progress"]>

  export type progressSelectScalar = {
    id?: boolean
    trainee_id?: boolean
    course_id?: boolean
    module_id?: boolean
    status?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type progressInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    courses?: boolean | progress$coursesArgs<ExtArgs>
    modules?: boolean | progress$modulesArgs<ExtArgs>
    users?: boolean | progress$usersArgs<ExtArgs>
  }
  export type progressIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    courses?: boolean | progress$coursesArgs<ExtArgs>
    modules?: boolean | progress$modulesArgs<ExtArgs>
    users?: boolean | progress$usersArgs<ExtArgs>
  }

  export type $progressPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "progress"
    objects: {
      courses: Prisma.$coursesPayload<ExtArgs> | null
      modules: Prisma.$modulesPayload<ExtArgs> | null
      users: Prisma.$usersPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      trainee_id: number | null
      course_id: number | null
      module_id: number | null
      status: string | null
      created_at: Date | null
      updated_at: Date | null
    }, ExtArgs["result"]["progress"]>
    composites: {}
  }

  type progressGetPayload<S extends boolean | null | undefined | progressDefaultArgs> = $Result.GetResult<Prisma.$progressPayload, S>

  type progressCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<progressFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProgressCountAggregateInputType | true
    }

  export interface progressDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['progress'], meta: { name: 'progress' } }
    /**
     * Find zero or one Progress that matches the filter.
     * @param {progressFindUniqueArgs} args - Arguments to find a Progress
     * @example
     * // Get one Progress
     * const progress = await prisma.progress.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends progressFindUniqueArgs>(args: SelectSubset<T, progressFindUniqueArgs<ExtArgs>>): Prisma__progressClient<$Result.GetResult<Prisma.$progressPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Progress that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {progressFindUniqueOrThrowArgs} args - Arguments to find a Progress
     * @example
     * // Get one Progress
     * const progress = await prisma.progress.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends progressFindUniqueOrThrowArgs>(args: SelectSubset<T, progressFindUniqueOrThrowArgs<ExtArgs>>): Prisma__progressClient<$Result.GetResult<Prisma.$progressPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Progress that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {progressFindFirstArgs} args - Arguments to find a Progress
     * @example
     * // Get one Progress
     * const progress = await prisma.progress.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends progressFindFirstArgs>(args?: SelectSubset<T, progressFindFirstArgs<ExtArgs>>): Prisma__progressClient<$Result.GetResult<Prisma.$progressPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Progress that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {progressFindFirstOrThrowArgs} args - Arguments to find a Progress
     * @example
     * // Get one Progress
     * const progress = await prisma.progress.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends progressFindFirstOrThrowArgs>(args?: SelectSubset<T, progressFindFirstOrThrowArgs<ExtArgs>>): Prisma__progressClient<$Result.GetResult<Prisma.$progressPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Progresses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {progressFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Progresses
     * const progresses = await prisma.progress.findMany()
     * 
     * // Get first 10 Progresses
     * const progresses = await prisma.progress.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const progressWithIdOnly = await prisma.progress.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends progressFindManyArgs>(args?: SelectSubset<T, progressFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$progressPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Progress.
     * @param {progressCreateArgs} args - Arguments to create a Progress.
     * @example
     * // Create one Progress
     * const Progress = await prisma.progress.create({
     *   data: {
     *     // ... data to create a Progress
     *   }
     * })
     * 
     */
    create<T extends progressCreateArgs>(args: SelectSubset<T, progressCreateArgs<ExtArgs>>): Prisma__progressClient<$Result.GetResult<Prisma.$progressPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Progresses.
     * @param {progressCreateManyArgs} args - Arguments to create many Progresses.
     * @example
     * // Create many Progresses
     * const progress = await prisma.progress.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends progressCreateManyArgs>(args?: SelectSubset<T, progressCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Progresses and returns the data saved in the database.
     * @param {progressCreateManyAndReturnArgs} args - Arguments to create many Progresses.
     * @example
     * // Create many Progresses
     * const progress = await prisma.progress.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Progresses and only return the `id`
     * const progressWithIdOnly = await prisma.progress.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends progressCreateManyAndReturnArgs>(args?: SelectSubset<T, progressCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$progressPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Progress.
     * @param {progressDeleteArgs} args - Arguments to delete one Progress.
     * @example
     * // Delete one Progress
     * const Progress = await prisma.progress.delete({
     *   where: {
     *     // ... filter to delete one Progress
     *   }
     * })
     * 
     */
    delete<T extends progressDeleteArgs>(args: SelectSubset<T, progressDeleteArgs<ExtArgs>>): Prisma__progressClient<$Result.GetResult<Prisma.$progressPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Progress.
     * @param {progressUpdateArgs} args - Arguments to update one Progress.
     * @example
     * // Update one Progress
     * const progress = await prisma.progress.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends progressUpdateArgs>(args: SelectSubset<T, progressUpdateArgs<ExtArgs>>): Prisma__progressClient<$Result.GetResult<Prisma.$progressPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Progresses.
     * @param {progressDeleteManyArgs} args - Arguments to filter Progresses to delete.
     * @example
     * // Delete a few Progresses
     * const { count } = await prisma.progress.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends progressDeleteManyArgs>(args?: SelectSubset<T, progressDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Progresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {progressUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Progresses
     * const progress = await prisma.progress.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends progressUpdateManyArgs>(args: SelectSubset<T, progressUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Progress.
     * @param {progressUpsertArgs} args - Arguments to update or create a Progress.
     * @example
     * // Update or create a Progress
     * const progress = await prisma.progress.upsert({
     *   create: {
     *     // ... data to create a Progress
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Progress we want to update
     *   }
     * })
     */
    upsert<T extends progressUpsertArgs>(args: SelectSubset<T, progressUpsertArgs<ExtArgs>>): Prisma__progressClient<$Result.GetResult<Prisma.$progressPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Progresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {progressCountArgs} args - Arguments to filter Progresses to count.
     * @example
     * // Count the number of Progresses
     * const count = await prisma.progress.count({
     *   where: {
     *     // ... the filter for the Progresses we want to count
     *   }
     * })
    **/
    count<T extends progressCountArgs>(
      args?: Subset<T, progressCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProgressCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Progress.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProgressAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProgressAggregateArgs>(args: Subset<T, ProgressAggregateArgs>): Prisma.PrismaPromise<GetProgressAggregateType<T>>

    /**
     * Group by Progress.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {progressGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends progressGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: progressGroupByArgs['orderBy'] }
        : { orderBy?: progressGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, progressGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProgressGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the progress model
   */
  readonly fields: progressFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for progress.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__progressClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    courses<T extends progress$coursesArgs<ExtArgs> = {}>(args?: Subset<T, progress$coursesArgs<ExtArgs>>): Prisma__coursesClient<$Result.GetResult<Prisma.$coursesPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    modules<T extends progress$modulesArgs<ExtArgs> = {}>(args?: Subset<T, progress$modulesArgs<ExtArgs>>): Prisma__modulesClient<$Result.GetResult<Prisma.$modulesPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    users<T extends progress$usersArgs<ExtArgs> = {}>(args?: Subset<T, progress$usersArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the progress model
   */ 
  interface progressFieldRefs {
    readonly id: FieldRef<"progress", 'Int'>
    readonly trainee_id: FieldRef<"progress", 'Int'>
    readonly course_id: FieldRef<"progress", 'Int'>
    readonly module_id: FieldRef<"progress", 'Int'>
    readonly status: FieldRef<"progress", 'String'>
    readonly created_at: FieldRef<"progress", 'DateTime'>
    readonly updated_at: FieldRef<"progress", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * progress findUnique
   */
  export type progressFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the progress
     */
    select?: progressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: progressInclude<ExtArgs> | null
    /**
     * Filter, which progress to fetch.
     */
    where: progressWhereUniqueInput
  }

  /**
   * progress findUniqueOrThrow
   */
  export type progressFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the progress
     */
    select?: progressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: progressInclude<ExtArgs> | null
    /**
     * Filter, which progress to fetch.
     */
    where: progressWhereUniqueInput
  }

  /**
   * progress findFirst
   */
  export type progressFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the progress
     */
    select?: progressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: progressInclude<ExtArgs> | null
    /**
     * Filter, which progress to fetch.
     */
    where?: progressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of progresses to fetch.
     */
    orderBy?: progressOrderByWithRelationInput | progressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for progresses.
     */
    cursor?: progressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` progresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` progresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of progresses.
     */
    distinct?: ProgressScalarFieldEnum | ProgressScalarFieldEnum[]
  }

  /**
   * progress findFirstOrThrow
   */
  export type progressFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the progress
     */
    select?: progressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: progressInclude<ExtArgs> | null
    /**
     * Filter, which progress to fetch.
     */
    where?: progressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of progresses to fetch.
     */
    orderBy?: progressOrderByWithRelationInput | progressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for progresses.
     */
    cursor?: progressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` progresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` progresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of progresses.
     */
    distinct?: ProgressScalarFieldEnum | ProgressScalarFieldEnum[]
  }

  /**
   * progress findMany
   */
  export type progressFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the progress
     */
    select?: progressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: progressInclude<ExtArgs> | null
    /**
     * Filter, which progresses to fetch.
     */
    where?: progressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of progresses to fetch.
     */
    orderBy?: progressOrderByWithRelationInput | progressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing progresses.
     */
    cursor?: progressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` progresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` progresses.
     */
    skip?: number
    distinct?: ProgressScalarFieldEnum | ProgressScalarFieldEnum[]
  }

  /**
   * progress create
   */
  export type progressCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the progress
     */
    select?: progressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: progressInclude<ExtArgs> | null
    /**
     * The data needed to create a progress.
     */
    data?: XOR<progressCreateInput, progressUncheckedCreateInput>
  }

  /**
   * progress createMany
   */
  export type progressCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many progresses.
     */
    data: progressCreateManyInput | progressCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * progress createManyAndReturn
   */
  export type progressCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the progress
     */
    select?: progressSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many progresses.
     */
    data: progressCreateManyInput | progressCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: progressIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * progress update
   */
  export type progressUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the progress
     */
    select?: progressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: progressInclude<ExtArgs> | null
    /**
     * The data needed to update a progress.
     */
    data: XOR<progressUpdateInput, progressUncheckedUpdateInput>
    /**
     * Choose, which progress to update.
     */
    where: progressWhereUniqueInput
  }

  /**
   * progress updateMany
   */
  export type progressUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update progresses.
     */
    data: XOR<progressUpdateManyMutationInput, progressUncheckedUpdateManyInput>
    /**
     * Filter which progresses to update
     */
    where?: progressWhereInput
  }

  /**
   * progress upsert
   */
  export type progressUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the progress
     */
    select?: progressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: progressInclude<ExtArgs> | null
    /**
     * The filter to search for the progress to update in case it exists.
     */
    where: progressWhereUniqueInput
    /**
     * In case the progress found by the `where` argument doesn't exist, create a new progress with this data.
     */
    create: XOR<progressCreateInput, progressUncheckedCreateInput>
    /**
     * In case the progress was found with the provided `where` argument, update it with this data.
     */
    update: XOR<progressUpdateInput, progressUncheckedUpdateInput>
  }

  /**
   * progress delete
   */
  export type progressDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the progress
     */
    select?: progressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: progressInclude<ExtArgs> | null
    /**
     * Filter which progress to delete.
     */
    where: progressWhereUniqueInput
  }

  /**
   * progress deleteMany
   */
  export type progressDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which progresses to delete
     */
    where?: progressWhereInput
  }

  /**
   * progress.courses
   */
  export type progress$coursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the courses
     */
    select?: coursesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: coursesInclude<ExtArgs> | null
    where?: coursesWhereInput
  }

  /**
   * progress.modules
   */
  export type progress$modulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the modules
     */
    select?: modulesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: modulesInclude<ExtArgs> | null
    where?: modulesWhereInput
  }

  /**
   * progress.users
   */
  export type progress$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    where?: usersWhereInput
  }

  /**
   * progress without action
   */
  export type progressDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the progress
     */
    select?: progressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: progressInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const Flyway_schema_historyScalarFieldEnum: {
    installed_rank: 'installed_rank',
    version: 'version',
    description: 'description',
    type: 'type',
    script: 'script',
    checksum: 'checksum',
    installed_by: 'installed_by',
    installed_on: 'installed_on',
    execution_time: 'execution_time',
    success: 'success'
  };

  export type Flyway_schema_historyScalarFieldEnum = (typeof Flyway_schema_historyScalarFieldEnum)[keyof typeof Flyway_schema_historyScalarFieldEnum]


  export const UsersScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    role: 'role',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const Course_traineesScalarFieldEnum: {
    course_id: 'course_id',
    trainee_id: 'trainee_id'
  };

  export type Course_traineesScalarFieldEnum = (typeof Course_traineesScalarFieldEnum)[keyof typeof Course_traineesScalarFieldEnum]


  export const CoursesScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    trainer_id: 'trainer_id',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type CoursesScalarFieldEnum = (typeof CoursesScalarFieldEnum)[keyof typeof CoursesScalarFieldEnum]


  export const ModulesScalarFieldEnum: {
    id: 'id',
    title: 'title',
    course_id: 'course_id',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type ModulesScalarFieldEnum = (typeof ModulesScalarFieldEnum)[keyof typeof ModulesScalarFieldEnum]


  export const ProgressScalarFieldEnum: {
    id: 'id',
    trainee_id: 'trainee_id',
    course_id: 'course_id',
    module_id: 'module_id',
    status: 'status',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type ProgressScalarFieldEnum = (typeof ProgressScalarFieldEnum)[keyof typeof ProgressScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type flyway_schema_historyWhereInput = {
    AND?: flyway_schema_historyWhereInput | flyway_schema_historyWhereInput[]
    OR?: flyway_schema_historyWhereInput[]
    NOT?: flyway_schema_historyWhereInput | flyway_schema_historyWhereInput[]
    installed_rank?: IntFilter<"flyway_schema_history"> | number
    version?: StringNullableFilter<"flyway_schema_history"> | string | null
    description?: StringFilter<"flyway_schema_history"> | string
    type?: StringFilter<"flyway_schema_history"> | string
    script?: StringFilter<"flyway_schema_history"> | string
    checksum?: IntNullableFilter<"flyway_schema_history"> | number | null
    installed_by?: StringFilter<"flyway_schema_history"> | string
    installed_on?: DateTimeFilter<"flyway_schema_history"> | Date | string
    execution_time?: IntFilter<"flyway_schema_history"> | number
    success?: BoolFilter<"flyway_schema_history"> | boolean
  }

  export type flyway_schema_historyOrderByWithRelationInput = {
    installed_rank?: SortOrder
    version?: SortOrderInput | SortOrder
    description?: SortOrder
    type?: SortOrder
    script?: SortOrder
    checksum?: SortOrderInput | SortOrder
    installed_by?: SortOrder
    installed_on?: SortOrder
    execution_time?: SortOrder
    success?: SortOrder
  }

  export type flyway_schema_historyWhereUniqueInput = Prisma.AtLeast<{
    installed_rank?: number
    AND?: flyway_schema_historyWhereInput | flyway_schema_historyWhereInput[]
    OR?: flyway_schema_historyWhereInput[]
    NOT?: flyway_schema_historyWhereInput | flyway_schema_historyWhereInput[]
    version?: StringNullableFilter<"flyway_schema_history"> | string | null
    description?: StringFilter<"flyway_schema_history"> | string
    type?: StringFilter<"flyway_schema_history"> | string
    script?: StringFilter<"flyway_schema_history"> | string
    checksum?: IntNullableFilter<"flyway_schema_history"> | number | null
    installed_by?: StringFilter<"flyway_schema_history"> | string
    installed_on?: DateTimeFilter<"flyway_schema_history"> | Date | string
    execution_time?: IntFilter<"flyway_schema_history"> | number
    success?: BoolFilter<"flyway_schema_history"> | boolean
  }, "installed_rank">

  export type flyway_schema_historyOrderByWithAggregationInput = {
    installed_rank?: SortOrder
    version?: SortOrderInput | SortOrder
    description?: SortOrder
    type?: SortOrder
    script?: SortOrder
    checksum?: SortOrderInput | SortOrder
    installed_by?: SortOrder
    installed_on?: SortOrder
    execution_time?: SortOrder
    success?: SortOrder
    _count?: flyway_schema_historyCountOrderByAggregateInput
    _avg?: flyway_schema_historyAvgOrderByAggregateInput
    _max?: flyway_schema_historyMaxOrderByAggregateInput
    _min?: flyway_schema_historyMinOrderByAggregateInput
    _sum?: flyway_schema_historySumOrderByAggregateInput
  }

  export type flyway_schema_historyScalarWhereWithAggregatesInput = {
    AND?: flyway_schema_historyScalarWhereWithAggregatesInput | flyway_schema_historyScalarWhereWithAggregatesInput[]
    OR?: flyway_schema_historyScalarWhereWithAggregatesInput[]
    NOT?: flyway_schema_historyScalarWhereWithAggregatesInput | flyway_schema_historyScalarWhereWithAggregatesInput[]
    installed_rank?: IntWithAggregatesFilter<"flyway_schema_history"> | number
    version?: StringNullableWithAggregatesFilter<"flyway_schema_history"> | string | null
    description?: StringWithAggregatesFilter<"flyway_schema_history"> | string
    type?: StringWithAggregatesFilter<"flyway_schema_history"> | string
    script?: StringWithAggregatesFilter<"flyway_schema_history"> | string
    checksum?: IntNullableWithAggregatesFilter<"flyway_schema_history"> | number | null
    installed_by?: StringWithAggregatesFilter<"flyway_schema_history"> | string
    installed_on?: DateTimeWithAggregatesFilter<"flyway_schema_history"> | Date | string
    execution_time?: IntWithAggregatesFilter<"flyway_schema_history"> | number
    success?: BoolWithAggregatesFilter<"flyway_schema_history"> | boolean
  }

  export type usersWhereInput = {
    AND?: usersWhereInput | usersWhereInput[]
    OR?: usersWhereInput[]
    NOT?: usersWhereInput | usersWhereInput[]
    id?: IntFilter<"users"> | number
    email?: StringFilter<"users"> | string
    password?: StringFilter<"users"> | string
    role?: StringFilter<"users"> | string
    created_at?: DateTimeNullableFilter<"users"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"users"> | Date | string | null
    course_trainees?: Course_traineesListRelationFilter
    courses?: CoursesListRelationFilter
    progress?: ProgressListRelationFilter
  }

  export type usersOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    course_trainees?: course_traineesOrderByRelationAggregateInput
    courses?: coursesOrderByRelationAggregateInput
    progress?: progressOrderByRelationAggregateInput
  }

  export type usersWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: usersWhereInput | usersWhereInput[]
    OR?: usersWhereInput[]
    NOT?: usersWhereInput | usersWhereInput[]
    password?: StringFilter<"users"> | string
    role?: StringFilter<"users"> | string
    created_at?: DateTimeNullableFilter<"users"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"users"> | Date | string | null
    course_trainees?: Course_traineesListRelationFilter
    courses?: CoursesListRelationFilter
    progress?: ProgressListRelationFilter
  }, "id" | "email">

  export type usersOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    _count?: usersCountOrderByAggregateInput
    _avg?: usersAvgOrderByAggregateInput
    _max?: usersMaxOrderByAggregateInput
    _min?: usersMinOrderByAggregateInput
    _sum?: usersSumOrderByAggregateInput
  }

  export type usersScalarWhereWithAggregatesInput = {
    AND?: usersScalarWhereWithAggregatesInput | usersScalarWhereWithAggregatesInput[]
    OR?: usersScalarWhereWithAggregatesInput[]
    NOT?: usersScalarWhereWithAggregatesInput | usersScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"users"> | number
    email?: StringWithAggregatesFilter<"users"> | string
    password?: StringWithAggregatesFilter<"users"> | string
    role?: StringWithAggregatesFilter<"users"> | string
    created_at?: DateTimeNullableWithAggregatesFilter<"users"> | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter<"users"> | Date | string | null
  }

  export type course_traineesWhereInput = {
    AND?: course_traineesWhereInput | course_traineesWhereInput[]
    OR?: course_traineesWhereInput[]
    NOT?: course_traineesWhereInput | course_traineesWhereInput[]
    course_id?: IntFilter<"course_trainees"> | number
    trainee_id?: IntFilter<"course_trainees"> | number
    courses?: XOR<CoursesRelationFilter, coursesWhereInput>
    users?: XOR<UsersRelationFilter, usersWhereInput>
  }

  export type course_traineesOrderByWithRelationInput = {
    course_id?: SortOrder
    trainee_id?: SortOrder
    courses?: coursesOrderByWithRelationInput
    users?: usersOrderByWithRelationInput
  }

  export type course_traineesWhereUniqueInput = Prisma.AtLeast<{
    course_id_trainee_id?: course_traineesCourse_idTrainee_idCompoundUniqueInput
    AND?: course_traineesWhereInput | course_traineesWhereInput[]
    OR?: course_traineesWhereInput[]
    NOT?: course_traineesWhereInput | course_traineesWhereInput[]
    course_id?: IntFilter<"course_trainees"> | number
    trainee_id?: IntFilter<"course_trainees"> | number
    courses?: XOR<CoursesRelationFilter, coursesWhereInput>
    users?: XOR<UsersRelationFilter, usersWhereInput>
  }, "course_id_trainee_id">

  export type course_traineesOrderByWithAggregationInput = {
    course_id?: SortOrder
    trainee_id?: SortOrder
    _count?: course_traineesCountOrderByAggregateInput
    _avg?: course_traineesAvgOrderByAggregateInput
    _max?: course_traineesMaxOrderByAggregateInput
    _min?: course_traineesMinOrderByAggregateInput
    _sum?: course_traineesSumOrderByAggregateInput
  }

  export type course_traineesScalarWhereWithAggregatesInput = {
    AND?: course_traineesScalarWhereWithAggregatesInput | course_traineesScalarWhereWithAggregatesInput[]
    OR?: course_traineesScalarWhereWithAggregatesInput[]
    NOT?: course_traineesScalarWhereWithAggregatesInput | course_traineesScalarWhereWithAggregatesInput[]
    course_id?: IntWithAggregatesFilter<"course_trainees"> | number
    trainee_id?: IntWithAggregatesFilter<"course_trainees"> | number
  }

  export type coursesWhereInput = {
    AND?: coursesWhereInput | coursesWhereInput[]
    OR?: coursesWhereInput[]
    NOT?: coursesWhereInput | coursesWhereInput[]
    id?: IntFilter<"courses"> | number
    title?: StringFilter<"courses"> | string
    description?: StringNullableFilter<"courses"> | string | null
    trainer_id?: IntNullableFilter<"courses"> | number | null
    created_at?: DateTimeNullableFilter<"courses"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"courses"> | Date | string | null
    course_trainees?: Course_traineesListRelationFilter
    users?: XOR<UsersNullableRelationFilter, usersWhereInput> | null
    modules?: ModulesListRelationFilter
    progress?: ProgressListRelationFilter
  }

  export type coursesOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    trainer_id?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    course_trainees?: course_traineesOrderByRelationAggregateInput
    users?: usersOrderByWithRelationInput
    modules?: modulesOrderByRelationAggregateInput
    progress?: progressOrderByRelationAggregateInput
  }

  export type coursesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: coursesWhereInput | coursesWhereInput[]
    OR?: coursesWhereInput[]
    NOT?: coursesWhereInput | coursesWhereInput[]
    title?: StringFilter<"courses"> | string
    description?: StringNullableFilter<"courses"> | string | null
    trainer_id?: IntNullableFilter<"courses"> | number | null
    created_at?: DateTimeNullableFilter<"courses"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"courses"> | Date | string | null
    course_trainees?: Course_traineesListRelationFilter
    users?: XOR<UsersNullableRelationFilter, usersWhereInput> | null
    modules?: ModulesListRelationFilter
    progress?: ProgressListRelationFilter
  }, "id">

  export type coursesOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    trainer_id?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    _count?: coursesCountOrderByAggregateInput
    _avg?: coursesAvgOrderByAggregateInput
    _max?: coursesMaxOrderByAggregateInput
    _min?: coursesMinOrderByAggregateInput
    _sum?: coursesSumOrderByAggregateInput
  }

  export type coursesScalarWhereWithAggregatesInput = {
    AND?: coursesScalarWhereWithAggregatesInput | coursesScalarWhereWithAggregatesInput[]
    OR?: coursesScalarWhereWithAggregatesInput[]
    NOT?: coursesScalarWhereWithAggregatesInput | coursesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"courses"> | number
    title?: StringWithAggregatesFilter<"courses"> | string
    description?: StringNullableWithAggregatesFilter<"courses"> | string | null
    trainer_id?: IntNullableWithAggregatesFilter<"courses"> | number | null
    created_at?: DateTimeNullableWithAggregatesFilter<"courses"> | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter<"courses"> | Date | string | null
  }

  export type modulesWhereInput = {
    AND?: modulesWhereInput | modulesWhereInput[]
    OR?: modulesWhereInput[]
    NOT?: modulesWhereInput | modulesWhereInput[]
    id?: IntFilter<"modules"> | number
    title?: StringFilter<"modules"> | string
    course_id?: IntNullableFilter<"modules"> | number | null
    created_at?: DateTimeNullableFilter<"modules"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"modules"> | Date | string | null
    courses?: XOR<CoursesNullableRelationFilter, coursesWhereInput> | null
    progress?: ProgressListRelationFilter
  }

  export type modulesOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    course_id?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    courses?: coursesOrderByWithRelationInput
    progress?: progressOrderByRelationAggregateInput
  }

  export type modulesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: modulesWhereInput | modulesWhereInput[]
    OR?: modulesWhereInput[]
    NOT?: modulesWhereInput | modulesWhereInput[]
    title?: StringFilter<"modules"> | string
    course_id?: IntNullableFilter<"modules"> | number | null
    created_at?: DateTimeNullableFilter<"modules"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"modules"> | Date | string | null
    courses?: XOR<CoursesNullableRelationFilter, coursesWhereInput> | null
    progress?: ProgressListRelationFilter
  }, "id">

  export type modulesOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    course_id?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    _count?: modulesCountOrderByAggregateInput
    _avg?: modulesAvgOrderByAggregateInput
    _max?: modulesMaxOrderByAggregateInput
    _min?: modulesMinOrderByAggregateInput
    _sum?: modulesSumOrderByAggregateInput
  }

  export type modulesScalarWhereWithAggregatesInput = {
    AND?: modulesScalarWhereWithAggregatesInput | modulesScalarWhereWithAggregatesInput[]
    OR?: modulesScalarWhereWithAggregatesInput[]
    NOT?: modulesScalarWhereWithAggregatesInput | modulesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"modules"> | number
    title?: StringWithAggregatesFilter<"modules"> | string
    course_id?: IntNullableWithAggregatesFilter<"modules"> | number | null
    created_at?: DateTimeNullableWithAggregatesFilter<"modules"> | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter<"modules"> | Date | string | null
  }

  export type progressWhereInput = {
    AND?: progressWhereInput | progressWhereInput[]
    OR?: progressWhereInput[]
    NOT?: progressWhereInput | progressWhereInput[]
    id?: IntFilter<"progress"> | number
    trainee_id?: IntNullableFilter<"progress"> | number | null
    course_id?: IntNullableFilter<"progress"> | number | null
    module_id?: IntNullableFilter<"progress"> | number | null
    status?: StringNullableFilter<"progress"> | string | null
    created_at?: DateTimeNullableFilter<"progress"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"progress"> | Date | string | null
    courses?: XOR<CoursesNullableRelationFilter, coursesWhereInput> | null
    modules?: XOR<ModulesNullableRelationFilter, modulesWhereInput> | null
    users?: XOR<UsersNullableRelationFilter, usersWhereInput> | null
  }

  export type progressOrderByWithRelationInput = {
    id?: SortOrder
    trainee_id?: SortOrderInput | SortOrder
    course_id?: SortOrderInput | SortOrder
    module_id?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    courses?: coursesOrderByWithRelationInput
    modules?: modulesOrderByWithRelationInput
    users?: usersOrderByWithRelationInput
  }

  export type progressWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: progressWhereInput | progressWhereInput[]
    OR?: progressWhereInput[]
    NOT?: progressWhereInput | progressWhereInput[]
    trainee_id?: IntNullableFilter<"progress"> | number | null
    course_id?: IntNullableFilter<"progress"> | number | null
    module_id?: IntNullableFilter<"progress"> | number | null
    status?: StringNullableFilter<"progress"> | string | null
    created_at?: DateTimeNullableFilter<"progress"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"progress"> | Date | string | null
    courses?: XOR<CoursesNullableRelationFilter, coursesWhereInput> | null
    modules?: XOR<ModulesNullableRelationFilter, modulesWhereInput> | null
    users?: XOR<UsersNullableRelationFilter, usersWhereInput> | null
  }, "id">

  export type progressOrderByWithAggregationInput = {
    id?: SortOrder
    trainee_id?: SortOrderInput | SortOrder
    course_id?: SortOrderInput | SortOrder
    module_id?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    _count?: progressCountOrderByAggregateInput
    _avg?: progressAvgOrderByAggregateInput
    _max?: progressMaxOrderByAggregateInput
    _min?: progressMinOrderByAggregateInput
    _sum?: progressSumOrderByAggregateInput
  }

  export type progressScalarWhereWithAggregatesInput = {
    AND?: progressScalarWhereWithAggregatesInput | progressScalarWhereWithAggregatesInput[]
    OR?: progressScalarWhereWithAggregatesInput[]
    NOT?: progressScalarWhereWithAggregatesInput | progressScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"progress"> | number
    trainee_id?: IntNullableWithAggregatesFilter<"progress"> | number | null
    course_id?: IntNullableWithAggregatesFilter<"progress"> | number | null
    module_id?: IntNullableWithAggregatesFilter<"progress"> | number | null
    status?: StringNullableWithAggregatesFilter<"progress"> | string | null
    created_at?: DateTimeNullableWithAggregatesFilter<"progress"> | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter<"progress"> | Date | string | null
  }

  export type flyway_schema_historyCreateInput = {
    installed_rank: number
    version?: string | null
    description: string
    type: string
    script: string
    checksum?: number | null
    installed_by: string
    installed_on?: Date | string
    execution_time: number
    success: boolean
  }

  export type flyway_schema_historyUncheckedCreateInput = {
    installed_rank: number
    version?: string | null
    description: string
    type: string
    script: string
    checksum?: number | null
    installed_by: string
    installed_on?: Date | string
    execution_time: number
    success: boolean
  }

  export type flyway_schema_historyUpdateInput = {
    installed_rank?: IntFieldUpdateOperationsInput | number
    version?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    script?: StringFieldUpdateOperationsInput | string
    checksum?: NullableIntFieldUpdateOperationsInput | number | null
    installed_by?: StringFieldUpdateOperationsInput | string
    installed_on?: DateTimeFieldUpdateOperationsInput | Date | string
    execution_time?: IntFieldUpdateOperationsInput | number
    success?: BoolFieldUpdateOperationsInput | boolean
  }

  export type flyway_schema_historyUncheckedUpdateInput = {
    installed_rank?: IntFieldUpdateOperationsInput | number
    version?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    script?: StringFieldUpdateOperationsInput | string
    checksum?: NullableIntFieldUpdateOperationsInput | number | null
    installed_by?: StringFieldUpdateOperationsInput | string
    installed_on?: DateTimeFieldUpdateOperationsInput | Date | string
    execution_time?: IntFieldUpdateOperationsInput | number
    success?: BoolFieldUpdateOperationsInput | boolean
  }

  export type flyway_schema_historyCreateManyInput = {
    installed_rank: number
    version?: string | null
    description: string
    type: string
    script: string
    checksum?: number | null
    installed_by: string
    installed_on?: Date | string
    execution_time: number
    success: boolean
  }

  export type flyway_schema_historyUpdateManyMutationInput = {
    installed_rank?: IntFieldUpdateOperationsInput | number
    version?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    script?: StringFieldUpdateOperationsInput | string
    checksum?: NullableIntFieldUpdateOperationsInput | number | null
    installed_by?: StringFieldUpdateOperationsInput | string
    installed_on?: DateTimeFieldUpdateOperationsInput | Date | string
    execution_time?: IntFieldUpdateOperationsInput | number
    success?: BoolFieldUpdateOperationsInput | boolean
  }

  export type flyway_schema_historyUncheckedUpdateManyInput = {
    installed_rank?: IntFieldUpdateOperationsInput | number
    version?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    script?: StringFieldUpdateOperationsInput | string
    checksum?: NullableIntFieldUpdateOperationsInput | number | null
    installed_by?: StringFieldUpdateOperationsInput | string
    installed_on?: DateTimeFieldUpdateOperationsInput | Date | string
    execution_time?: IntFieldUpdateOperationsInput | number
    success?: BoolFieldUpdateOperationsInput | boolean
  }

  export type usersCreateInput = {
    email: string
    password: string
    role: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    course_trainees?: course_traineesCreateNestedManyWithoutUsersInput
    courses?: coursesCreateNestedManyWithoutUsersInput
    progress?: progressCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateInput = {
    id?: number
    email: string
    password: string
    role: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    course_trainees?: course_traineesUncheckedCreateNestedManyWithoutUsersInput
    courses?: coursesUncheckedCreateNestedManyWithoutUsersInput
    progress?: progressUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    course_trainees?: course_traineesUpdateManyWithoutUsersNestedInput
    courses?: coursesUpdateManyWithoutUsersNestedInput
    progress?: progressUpdateManyWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    course_trainees?: course_traineesUncheckedUpdateManyWithoutUsersNestedInput
    courses?: coursesUncheckedUpdateManyWithoutUsersNestedInput
    progress?: progressUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type usersCreateManyInput = {
    id?: number
    email: string
    password: string
    role: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type usersUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type usersUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type course_traineesCreateInput = {
    courses: coursesCreateNestedOneWithoutCourse_traineesInput
    users: usersCreateNestedOneWithoutCourse_traineesInput
  }

  export type course_traineesUncheckedCreateInput = {
    course_id: number
    trainee_id: number
  }

  export type course_traineesUpdateInput = {
    courses?: coursesUpdateOneRequiredWithoutCourse_traineesNestedInput
    users?: usersUpdateOneRequiredWithoutCourse_traineesNestedInput
  }

  export type course_traineesUncheckedUpdateInput = {
    course_id?: IntFieldUpdateOperationsInput | number
    trainee_id?: IntFieldUpdateOperationsInput | number
  }

  export type course_traineesCreateManyInput = {
    course_id: number
    trainee_id: number
  }

  export type course_traineesUpdateManyMutationInput = {

  }

  export type course_traineesUncheckedUpdateManyInput = {
    course_id?: IntFieldUpdateOperationsInput | number
    trainee_id?: IntFieldUpdateOperationsInput | number
  }

  export type coursesCreateInput = {
    title: string
    description?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    course_trainees?: course_traineesCreateNestedManyWithoutCoursesInput
    users?: usersCreateNestedOneWithoutCoursesInput
    modules?: modulesCreateNestedManyWithoutCoursesInput
    progress?: progressCreateNestedManyWithoutCoursesInput
  }

  export type coursesUncheckedCreateInput = {
    id?: number
    title: string
    description?: string | null
    trainer_id?: number | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    course_trainees?: course_traineesUncheckedCreateNestedManyWithoutCoursesInput
    modules?: modulesUncheckedCreateNestedManyWithoutCoursesInput
    progress?: progressUncheckedCreateNestedManyWithoutCoursesInput
  }

  export type coursesUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    course_trainees?: course_traineesUpdateManyWithoutCoursesNestedInput
    users?: usersUpdateOneWithoutCoursesNestedInput
    modules?: modulesUpdateManyWithoutCoursesNestedInput
    progress?: progressUpdateManyWithoutCoursesNestedInput
  }

  export type coursesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    trainer_id?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    course_trainees?: course_traineesUncheckedUpdateManyWithoutCoursesNestedInput
    modules?: modulesUncheckedUpdateManyWithoutCoursesNestedInput
    progress?: progressUncheckedUpdateManyWithoutCoursesNestedInput
  }

  export type coursesCreateManyInput = {
    id?: number
    title: string
    description?: string | null
    trainer_id?: number | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type coursesUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type coursesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    trainer_id?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type modulesCreateInput = {
    title: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    courses?: coursesCreateNestedOneWithoutModulesInput
    progress?: progressCreateNestedManyWithoutModulesInput
  }

  export type modulesUncheckedCreateInput = {
    id?: number
    title: string
    course_id?: number | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    progress?: progressUncheckedCreateNestedManyWithoutModulesInput
  }

  export type modulesUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    courses?: coursesUpdateOneWithoutModulesNestedInput
    progress?: progressUpdateManyWithoutModulesNestedInput
  }

  export type modulesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    course_id?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    progress?: progressUncheckedUpdateManyWithoutModulesNestedInput
  }

  export type modulesCreateManyInput = {
    id?: number
    title: string
    course_id?: number | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type modulesUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type modulesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    course_id?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type progressCreateInput = {
    status?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    courses?: coursesCreateNestedOneWithoutProgressInput
    modules?: modulesCreateNestedOneWithoutProgressInput
    users?: usersCreateNestedOneWithoutProgressInput
  }

  export type progressUncheckedCreateInput = {
    id?: number
    trainee_id?: number | null
    course_id?: number | null
    module_id?: number | null
    status?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type progressUpdateInput = {
    status?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    courses?: coursesUpdateOneWithoutProgressNestedInput
    modules?: modulesUpdateOneWithoutProgressNestedInput
    users?: usersUpdateOneWithoutProgressNestedInput
  }

  export type progressUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    trainee_id?: NullableIntFieldUpdateOperationsInput | number | null
    course_id?: NullableIntFieldUpdateOperationsInput | number | null
    module_id?: NullableIntFieldUpdateOperationsInput | number | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type progressCreateManyInput = {
    id?: number
    trainee_id?: number | null
    course_id?: number | null
    module_id?: number | null
    status?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type progressUpdateManyMutationInput = {
    status?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type progressUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    trainee_id?: NullableIntFieldUpdateOperationsInput | number | null
    course_id?: NullableIntFieldUpdateOperationsInput | number | null
    module_id?: NullableIntFieldUpdateOperationsInput | number | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type flyway_schema_historyCountOrderByAggregateInput = {
    installed_rank?: SortOrder
    version?: SortOrder
    description?: SortOrder
    type?: SortOrder
    script?: SortOrder
    checksum?: SortOrder
    installed_by?: SortOrder
    installed_on?: SortOrder
    execution_time?: SortOrder
    success?: SortOrder
  }

  export type flyway_schema_historyAvgOrderByAggregateInput = {
    installed_rank?: SortOrder
    checksum?: SortOrder
    execution_time?: SortOrder
  }

  export type flyway_schema_historyMaxOrderByAggregateInput = {
    installed_rank?: SortOrder
    version?: SortOrder
    description?: SortOrder
    type?: SortOrder
    script?: SortOrder
    checksum?: SortOrder
    installed_by?: SortOrder
    installed_on?: SortOrder
    execution_time?: SortOrder
    success?: SortOrder
  }

  export type flyway_schema_historyMinOrderByAggregateInput = {
    installed_rank?: SortOrder
    version?: SortOrder
    description?: SortOrder
    type?: SortOrder
    script?: SortOrder
    checksum?: SortOrder
    installed_by?: SortOrder
    installed_on?: SortOrder
    execution_time?: SortOrder
    success?: SortOrder
  }

  export type flyway_schema_historySumOrderByAggregateInput = {
    installed_rank?: SortOrder
    checksum?: SortOrder
    execution_time?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type Course_traineesListRelationFilter = {
    every?: course_traineesWhereInput
    some?: course_traineesWhereInput
    none?: course_traineesWhereInput
  }

  export type CoursesListRelationFilter = {
    every?: coursesWhereInput
    some?: coursesWhereInput
    none?: coursesWhereInput
  }

  export type ProgressListRelationFilter = {
    every?: progressWhereInput
    some?: progressWhereInput
    none?: progressWhereInput
  }

  export type course_traineesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type coursesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type progressOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type usersCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type usersAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type usersMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type usersMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type usersSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type CoursesRelationFilter = {
    is?: coursesWhereInput
    isNot?: coursesWhereInput
  }

  export type UsersRelationFilter = {
    is?: usersWhereInput
    isNot?: usersWhereInput
  }

  export type course_traineesCourse_idTrainee_idCompoundUniqueInput = {
    course_id: number
    trainee_id: number
  }

  export type course_traineesCountOrderByAggregateInput = {
    course_id?: SortOrder
    trainee_id?: SortOrder
  }

  export type course_traineesAvgOrderByAggregateInput = {
    course_id?: SortOrder
    trainee_id?: SortOrder
  }

  export type course_traineesMaxOrderByAggregateInput = {
    course_id?: SortOrder
    trainee_id?: SortOrder
  }

  export type course_traineesMinOrderByAggregateInput = {
    course_id?: SortOrder
    trainee_id?: SortOrder
  }

  export type course_traineesSumOrderByAggregateInput = {
    course_id?: SortOrder
    trainee_id?: SortOrder
  }

  export type UsersNullableRelationFilter = {
    is?: usersWhereInput | null
    isNot?: usersWhereInput | null
  }

  export type ModulesListRelationFilter = {
    every?: modulesWhereInput
    some?: modulesWhereInput
    none?: modulesWhereInput
  }

  export type modulesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type coursesCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    trainer_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type coursesAvgOrderByAggregateInput = {
    id?: SortOrder
    trainer_id?: SortOrder
  }

  export type coursesMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    trainer_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type coursesMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    trainer_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type coursesSumOrderByAggregateInput = {
    id?: SortOrder
    trainer_id?: SortOrder
  }

  export type CoursesNullableRelationFilter = {
    is?: coursesWhereInput | null
    isNot?: coursesWhereInput | null
  }

  export type modulesCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    course_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type modulesAvgOrderByAggregateInput = {
    id?: SortOrder
    course_id?: SortOrder
  }

  export type modulesMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    course_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type modulesMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    course_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type modulesSumOrderByAggregateInput = {
    id?: SortOrder
    course_id?: SortOrder
  }

  export type ModulesNullableRelationFilter = {
    is?: modulesWhereInput | null
    isNot?: modulesWhereInput | null
  }

  export type progressCountOrderByAggregateInput = {
    id?: SortOrder
    trainee_id?: SortOrder
    course_id?: SortOrder
    module_id?: SortOrder
    status?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type progressAvgOrderByAggregateInput = {
    id?: SortOrder
    trainee_id?: SortOrder
    course_id?: SortOrder
    module_id?: SortOrder
  }

  export type progressMaxOrderByAggregateInput = {
    id?: SortOrder
    trainee_id?: SortOrder
    course_id?: SortOrder
    module_id?: SortOrder
    status?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type progressMinOrderByAggregateInput = {
    id?: SortOrder
    trainee_id?: SortOrder
    course_id?: SortOrder
    module_id?: SortOrder
    status?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type progressSumOrderByAggregateInput = {
    id?: SortOrder
    trainee_id?: SortOrder
    course_id?: SortOrder
    module_id?: SortOrder
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type course_traineesCreateNestedManyWithoutUsersInput = {
    create?: XOR<course_traineesCreateWithoutUsersInput, course_traineesUncheckedCreateWithoutUsersInput> | course_traineesCreateWithoutUsersInput[] | course_traineesUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: course_traineesCreateOrConnectWithoutUsersInput | course_traineesCreateOrConnectWithoutUsersInput[]
    createMany?: course_traineesCreateManyUsersInputEnvelope
    connect?: course_traineesWhereUniqueInput | course_traineesWhereUniqueInput[]
  }

  export type coursesCreateNestedManyWithoutUsersInput = {
    create?: XOR<coursesCreateWithoutUsersInput, coursesUncheckedCreateWithoutUsersInput> | coursesCreateWithoutUsersInput[] | coursesUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: coursesCreateOrConnectWithoutUsersInput | coursesCreateOrConnectWithoutUsersInput[]
    createMany?: coursesCreateManyUsersInputEnvelope
    connect?: coursesWhereUniqueInput | coursesWhereUniqueInput[]
  }

  export type progressCreateNestedManyWithoutUsersInput = {
    create?: XOR<progressCreateWithoutUsersInput, progressUncheckedCreateWithoutUsersInput> | progressCreateWithoutUsersInput[] | progressUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: progressCreateOrConnectWithoutUsersInput | progressCreateOrConnectWithoutUsersInput[]
    createMany?: progressCreateManyUsersInputEnvelope
    connect?: progressWhereUniqueInput | progressWhereUniqueInput[]
  }

  export type course_traineesUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<course_traineesCreateWithoutUsersInput, course_traineesUncheckedCreateWithoutUsersInput> | course_traineesCreateWithoutUsersInput[] | course_traineesUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: course_traineesCreateOrConnectWithoutUsersInput | course_traineesCreateOrConnectWithoutUsersInput[]
    createMany?: course_traineesCreateManyUsersInputEnvelope
    connect?: course_traineesWhereUniqueInput | course_traineesWhereUniqueInput[]
  }

  export type coursesUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<coursesCreateWithoutUsersInput, coursesUncheckedCreateWithoutUsersInput> | coursesCreateWithoutUsersInput[] | coursesUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: coursesCreateOrConnectWithoutUsersInput | coursesCreateOrConnectWithoutUsersInput[]
    createMany?: coursesCreateManyUsersInputEnvelope
    connect?: coursesWhereUniqueInput | coursesWhereUniqueInput[]
  }

  export type progressUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<progressCreateWithoutUsersInput, progressUncheckedCreateWithoutUsersInput> | progressCreateWithoutUsersInput[] | progressUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: progressCreateOrConnectWithoutUsersInput | progressCreateOrConnectWithoutUsersInput[]
    createMany?: progressCreateManyUsersInputEnvelope
    connect?: progressWhereUniqueInput | progressWhereUniqueInput[]
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type course_traineesUpdateManyWithoutUsersNestedInput = {
    create?: XOR<course_traineesCreateWithoutUsersInput, course_traineesUncheckedCreateWithoutUsersInput> | course_traineesCreateWithoutUsersInput[] | course_traineesUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: course_traineesCreateOrConnectWithoutUsersInput | course_traineesCreateOrConnectWithoutUsersInput[]
    upsert?: course_traineesUpsertWithWhereUniqueWithoutUsersInput | course_traineesUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: course_traineesCreateManyUsersInputEnvelope
    set?: course_traineesWhereUniqueInput | course_traineesWhereUniqueInput[]
    disconnect?: course_traineesWhereUniqueInput | course_traineesWhereUniqueInput[]
    delete?: course_traineesWhereUniqueInput | course_traineesWhereUniqueInput[]
    connect?: course_traineesWhereUniqueInput | course_traineesWhereUniqueInput[]
    update?: course_traineesUpdateWithWhereUniqueWithoutUsersInput | course_traineesUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: course_traineesUpdateManyWithWhereWithoutUsersInput | course_traineesUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: course_traineesScalarWhereInput | course_traineesScalarWhereInput[]
  }

  export type coursesUpdateManyWithoutUsersNestedInput = {
    create?: XOR<coursesCreateWithoutUsersInput, coursesUncheckedCreateWithoutUsersInput> | coursesCreateWithoutUsersInput[] | coursesUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: coursesCreateOrConnectWithoutUsersInput | coursesCreateOrConnectWithoutUsersInput[]
    upsert?: coursesUpsertWithWhereUniqueWithoutUsersInput | coursesUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: coursesCreateManyUsersInputEnvelope
    set?: coursesWhereUniqueInput | coursesWhereUniqueInput[]
    disconnect?: coursesWhereUniqueInput | coursesWhereUniqueInput[]
    delete?: coursesWhereUniqueInput | coursesWhereUniqueInput[]
    connect?: coursesWhereUniqueInput | coursesWhereUniqueInput[]
    update?: coursesUpdateWithWhereUniqueWithoutUsersInput | coursesUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: coursesUpdateManyWithWhereWithoutUsersInput | coursesUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: coursesScalarWhereInput | coursesScalarWhereInput[]
  }

  export type progressUpdateManyWithoutUsersNestedInput = {
    create?: XOR<progressCreateWithoutUsersInput, progressUncheckedCreateWithoutUsersInput> | progressCreateWithoutUsersInput[] | progressUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: progressCreateOrConnectWithoutUsersInput | progressCreateOrConnectWithoutUsersInput[]
    upsert?: progressUpsertWithWhereUniqueWithoutUsersInput | progressUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: progressCreateManyUsersInputEnvelope
    set?: progressWhereUniqueInput | progressWhereUniqueInput[]
    disconnect?: progressWhereUniqueInput | progressWhereUniqueInput[]
    delete?: progressWhereUniqueInput | progressWhereUniqueInput[]
    connect?: progressWhereUniqueInput | progressWhereUniqueInput[]
    update?: progressUpdateWithWhereUniqueWithoutUsersInput | progressUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: progressUpdateManyWithWhereWithoutUsersInput | progressUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: progressScalarWhereInput | progressScalarWhereInput[]
  }

  export type course_traineesUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<course_traineesCreateWithoutUsersInput, course_traineesUncheckedCreateWithoutUsersInput> | course_traineesCreateWithoutUsersInput[] | course_traineesUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: course_traineesCreateOrConnectWithoutUsersInput | course_traineesCreateOrConnectWithoutUsersInput[]
    upsert?: course_traineesUpsertWithWhereUniqueWithoutUsersInput | course_traineesUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: course_traineesCreateManyUsersInputEnvelope
    set?: course_traineesWhereUniqueInput | course_traineesWhereUniqueInput[]
    disconnect?: course_traineesWhereUniqueInput | course_traineesWhereUniqueInput[]
    delete?: course_traineesWhereUniqueInput | course_traineesWhereUniqueInput[]
    connect?: course_traineesWhereUniqueInput | course_traineesWhereUniqueInput[]
    update?: course_traineesUpdateWithWhereUniqueWithoutUsersInput | course_traineesUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: course_traineesUpdateManyWithWhereWithoutUsersInput | course_traineesUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: course_traineesScalarWhereInput | course_traineesScalarWhereInput[]
  }

  export type coursesUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<coursesCreateWithoutUsersInput, coursesUncheckedCreateWithoutUsersInput> | coursesCreateWithoutUsersInput[] | coursesUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: coursesCreateOrConnectWithoutUsersInput | coursesCreateOrConnectWithoutUsersInput[]
    upsert?: coursesUpsertWithWhereUniqueWithoutUsersInput | coursesUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: coursesCreateManyUsersInputEnvelope
    set?: coursesWhereUniqueInput | coursesWhereUniqueInput[]
    disconnect?: coursesWhereUniqueInput | coursesWhereUniqueInput[]
    delete?: coursesWhereUniqueInput | coursesWhereUniqueInput[]
    connect?: coursesWhereUniqueInput | coursesWhereUniqueInput[]
    update?: coursesUpdateWithWhereUniqueWithoutUsersInput | coursesUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: coursesUpdateManyWithWhereWithoutUsersInput | coursesUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: coursesScalarWhereInput | coursesScalarWhereInput[]
  }

  export type progressUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<progressCreateWithoutUsersInput, progressUncheckedCreateWithoutUsersInput> | progressCreateWithoutUsersInput[] | progressUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: progressCreateOrConnectWithoutUsersInput | progressCreateOrConnectWithoutUsersInput[]
    upsert?: progressUpsertWithWhereUniqueWithoutUsersInput | progressUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: progressCreateManyUsersInputEnvelope
    set?: progressWhereUniqueInput | progressWhereUniqueInput[]
    disconnect?: progressWhereUniqueInput | progressWhereUniqueInput[]
    delete?: progressWhereUniqueInput | progressWhereUniqueInput[]
    connect?: progressWhereUniqueInput | progressWhereUniqueInput[]
    update?: progressUpdateWithWhereUniqueWithoutUsersInput | progressUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: progressUpdateManyWithWhereWithoutUsersInput | progressUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: progressScalarWhereInput | progressScalarWhereInput[]
  }

  export type coursesCreateNestedOneWithoutCourse_traineesInput = {
    create?: XOR<coursesCreateWithoutCourse_traineesInput, coursesUncheckedCreateWithoutCourse_traineesInput>
    connectOrCreate?: coursesCreateOrConnectWithoutCourse_traineesInput
    connect?: coursesWhereUniqueInput
  }

  export type usersCreateNestedOneWithoutCourse_traineesInput = {
    create?: XOR<usersCreateWithoutCourse_traineesInput, usersUncheckedCreateWithoutCourse_traineesInput>
    connectOrCreate?: usersCreateOrConnectWithoutCourse_traineesInput
    connect?: usersWhereUniqueInput
  }

  export type coursesUpdateOneRequiredWithoutCourse_traineesNestedInput = {
    create?: XOR<coursesCreateWithoutCourse_traineesInput, coursesUncheckedCreateWithoutCourse_traineesInput>
    connectOrCreate?: coursesCreateOrConnectWithoutCourse_traineesInput
    upsert?: coursesUpsertWithoutCourse_traineesInput
    connect?: coursesWhereUniqueInput
    update?: XOR<XOR<coursesUpdateToOneWithWhereWithoutCourse_traineesInput, coursesUpdateWithoutCourse_traineesInput>, coursesUncheckedUpdateWithoutCourse_traineesInput>
  }

  export type usersUpdateOneRequiredWithoutCourse_traineesNestedInput = {
    create?: XOR<usersCreateWithoutCourse_traineesInput, usersUncheckedCreateWithoutCourse_traineesInput>
    connectOrCreate?: usersCreateOrConnectWithoutCourse_traineesInput
    upsert?: usersUpsertWithoutCourse_traineesInput
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutCourse_traineesInput, usersUpdateWithoutCourse_traineesInput>, usersUncheckedUpdateWithoutCourse_traineesInput>
  }

  export type course_traineesCreateNestedManyWithoutCoursesInput = {
    create?: XOR<course_traineesCreateWithoutCoursesInput, course_traineesUncheckedCreateWithoutCoursesInput> | course_traineesCreateWithoutCoursesInput[] | course_traineesUncheckedCreateWithoutCoursesInput[]
    connectOrCreate?: course_traineesCreateOrConnectWithoutCoursesInput | course_traineesCreateOrConnectWithoutCoursesInput[]
    createMany?: course_traineesCreateManyCoursesInputEnvelope
    connect?: course_traineesWhereUniqueInput | course_traineesWhereUniqueInput[]
  }

  export type usersCreateNestedOneWithoutCoursesInput = {
    create?: XOR<usersCreateWithoutCoursesInput, usersUncheckedCreateWithoutCoursesInput>
    connectOrCreate?: usersCreateOrConnectWithoutCoursesInput
    connect?: usersWhereUniqueInput
  }

  export type modulesCreateNestedManyWithoutCoursesInput = {
    create?: XOR<modulesCreateWithoutCoursesInput, modulesUncheckedCreateWithoutCoursesInput> | modulesCreateWithoutCoursesInput[] | modulesUncheckedCreateWithoutCoursesInput[]
    connectOrCreate?: modulesCreateOrConnectWithoutCoursesInput | modulesCreateOrConnectWithoutCoursesInput[]
    createMany?: modulesCreateManyCoursesInputEnvelope
    connect?: modulesWhereUniqueInput | modulesWhereUniqueInput[]
  }

  export type progressCreateNestedManyWithoutCoursesInput = {
    create?: XOR<progressCreateWithoutCoursesInput, progressUncheckedCreateWithoutCoursesInput> | progressCreateWithoutCoursesInput[] | progressUncheckedCreateWithoutCoursesInput[]
    connectOrCreate?: progressCreateOrConnectWithoutCoursesInput | progressCreateOrConnectWithoutCoursesInput[]
    createMany?: progressCreateManyCoursesInputEnvelope
    connect?: progressWhereUniqueInput | progressWhereUniqueInput[]
  }

  export type course_traineesUncheckedCreateNestedManyWithoutCoursesInput = {
    create?: XOR<course_traineesCreateWithoutCoursesInput, course_traineesUncheckedCreateWithoutCoursesInput> | course_traineesCreateWithoutCoursesInput[] | course_traineesUncheckedCreateWithoutCoursesInput[]
    connectOrCreate?: course_traineesCreateOrConnectWithoutCoursesInput | course_traineesCreateOrConnectWithoutCoursesInput[]
    createMany?: course_traineesCreateManyCoursesInputEnvelope
    connect?: course_traineesWhereUniqueInput | course_traineesWhereUniqueInput[]
  }

  export type modulesUncheckedCreateNestedManyWithoutCoursesInput = {
    create?: XOR<modulesCreateWithoutCoursesInput, modulesUncheckedCreateWithoutCoursesInput> | modulesCreateWithoutCoursesInput[] | modulesUncheckedCreateWithoutCoursesInput[]
    connectOrCreate?: modulesCreateOrConnectWithoutCoursesInput | modulesCreateOrConnectWithoutCoursesInput[]
    createMany?: modulesCreateManyCoursesInputEnvelope
    connect?: modulesWhereUniqueInput | modulesWhereUniqueInput[]
  }

  export type progressUncheckedCreateNestedManyWithoutCoursesInput = {
    create?: XOR<progressCreateWithoutCoursesInput, progressUncheckedCreateWithoutCoursesInput> | progressCreateWithoutCoursesInput[] | progressUncheckedCreateWithoutCoursesInput[]
    connectOrCreate?: progressCreateOrConnectWithoutCoursesInput | progressCreateOrConnectWithoutCoursesInput[]
    createMany?: progressCreateManyCoursesInputEnvelope
    connect?: progressWhereUniqueInput | progressWhereUniqueInput[]
  }

  export type course_traineesUpdateManyWithoutCoursesNestedInput = {
    create?: XOR<course_traineesCreateWithoutCoursesInput, course_traineesUncheckedCreateWithoutCoursesInput> | course_traineesCreateWithoutCoursesInput[] | course_traineesUncheckedCreateWithoutCoursesInput[]
    connectOrCreate?: course_traineesCreateOrConnectWithoutCoursesInput | course_traineesCreateOrConnectWithoutCoursesInput[]
    upsert?: course_traineesUpsertWithWhereUniqueWithoutCoursesInput | course_traineesUpsertWithWhereUniqueWithoutCoursesInput[]
    createMany?: course_traineesCreateManyCoursesInputEnvelope
    set?: course_traineesWhereUniqueInput | course_traineesWhereUniqueInput[]
    disconnect?: course_traineesWhereUniqueInput | course_traineesWhereUniqueInput[]
    delete?: course_traineesWhereUniqueInput | course_traineesWhereUniqueInput[]
    connect?: course_traineesWhereUniqueInput | course_traineesWhereUniqueInput[]
    update?: course_traineesUpdateWithWhereUniqueWithoutCoursesInput | course_traineesUpdateWithWhereUniqueWithoutCoursesInput[]
    updateMany?: course_traineesUpdateManyWithWhereWithoutCoursesInput | course_traineesUpdateManyWithWhereWithoutCoursesInput[]
    deleteMany?: course_traineesScalarWhereInput | course_traineesScalarWhereInput[]
  }

  export type usersUpdateOneWithoutCoursesNestedInput = {
    create?: XOR<usersCreateWithoutCoursesInput, usersUncheckedCreateWithoutCoursesInput>
    connectOrCreate?: usersCreateOrConnectWithoutCoursesInput
    upsert?: usersUpsertWithoutCoursesInput
    disconnect?: usersWhereInput | boolean
    delete?: usersWhereInput | boolean
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutCoursesInput, usersUpdateWithoutCoursesInput>, usersUncheckedUpdateWithoutCoursesInput>
  }

  export type modulesUpdateManyWithoutCoursesNestedInput = {
    create?: XOR<modulesCreateWithoutCoursesInput, modulesUncheckedCreateWithoutCoursesInput> | modulesCreateWithoutCoursesInput[] | modulesUncheckedCreateWithoutCoursesInput[]
    connectOrCreate?: modulesCreateOrConnectWithoutCoursesInput | modulesCreateOrConnectWithoutCoursesInput[]
    upsert?: modulesUpsertWithWhereUniqueWithoutCoursesInput | modulesUpsertWithWhereUniqueWithoutCoursesInput[]
    createMany?: modulesCreateManyCoursesInputEnvelope
    set?: modulesWhereUniqueInput | modulesWhereUniqueInput[]
    disconnect?: modulesWhereUniqueInput | modulesWhereUniqueInput[]
    delete?: modulesWhereUniqueInput | modulesWhereUniqueInput[]
    connect?: modulesWhereUniqueInput | modulesWhereUniqueInput[]
    update?: modulesUpdateWithWhereUniqueWithoutCoursesInput | modulesUpdateWithWhereUniqueWithoutCoursesInput[]
    updateMany?: modulesUpdateManyWithWhereWithoutCoursesInput | modulesUpdateManyWithWhereWithoutCoursesInput[]
    deleteMany?: modulesScalarWhereInput | modulesScalarWhereInput[]
  }

  export type progressUpdateManyWithoutCoursesNestedInput = {
    create?: XOR<progressCreateWithoutCoursesInput, progressUncheckedCreateWithoutCoursesInput> | progressCreateWithoutCoursesInput[] | progressUncheckedCreateWithoutCoursesInput[]
    connectOrCreate?: progressCreateOrConnectWithoutCoursesInput | progressCreateOrConnectWithoutCoursesInput[]
    upsert?: progressUpsertWithWhereUniqueWithoutCoursesInput | progressUpsertWithWhereUniqueWithoutCoursesInput[]
    createMany?: progressCreateManyCoursesInputEnvelope
    set?: progressWhereUniqueInput | progressWhereUniqueInput[]
    disconnect?: progressWhereUniqueInput | progressWhereUniqueInput[]
    delete?: progressWhereUniqueInput | progressWhereUniqueInput[]
    connect?: progressWhereUniqueInput | progressWhereUniqueInput[]
    update?: progressUpdateWithWhereUniqueWithoutCoursesInput | progressUpdateWithWhereUniqueWithoutCoursesInput[]
    updateMany?: progressUpdateManyWithWhereWithoutCoursesInput | progressUpdateManyWithWhereWithoutCoursesInput[]
    deleteMany?: progressScalarWhereInput | progressScalarWhereInput[]
  }

  export type course_traineesUncheckedUpdateManyWithoutCoursesNestedInput = {
    create?: XOR<course_traineesCreateWithoutCoursesInput, course_traineesUncheckedCreateWithoutCoursesInput> | course_traineesCreateWithoutCoursesInput[] | course_traineesUncheckedCreateWithoutCoursesInput[]
    connectOrCreate?: course_traineesCreateOrConnectWithoutCoursesInput | course_traineesCreateOrConnectWithoutCoursesInput[]
    upsert?: course_traineesUpsertWithWhereUniqueWithoutCoursesInput | course_traineesUpsertWithWhereUniqueWithoutCoursesInput[]
    createMany?: course_traineesCreateManyCoursesInputEnvelope
    set?: course_traineesWhereUniqueInput | course_traineesWhereUniqueInput[]
    disconnect?: course_traineesWhereUniqueInput | course_traineesWhereUniqueInput[]
    delete?: course_traineesWhereUniqueInput | course_traineesWhereUniqueInput[]
    connect?: course_traineesWhereUniqueInput | course_traineesWhereUniqueInput[]
    update?: course_traineesUpdateWithWhereUniqueWithoutCoursesInput | course_traineesUpdateWithWhereUniqueWithoutCoursesInput[]
    updateMany?: course_traineesUpdateManyWithWhereWithoutCoursesInput | course_traineesUpdateManyWithWhereWithoutCoursesInput[]
    deleteMany?: course_traineesScalarWhereInput | course_traineesScalarWhereInput[]
  }

  export type modulesUncheckedUpdateManyWithoutCoursesNestedInput = {
    create?: XOR<modulesCreateWithoutCoursesInput, modulesUncheckedCreateWithoutCoursesInput> | modulesCreateWithoutCoursesInput[] | modulesUncheckedCreateWithoutCoursesInput[]
    connectOrCreate?: modulesCreateOrConnectWithoutCoursesInput | modulesCreateOrConnectWithoutCoursesInput[]
    upsert?: modulesUpsertWithWhereUniqueWithoutCoursesInput | modulesUpsertWithWhereUniqueWithoutCoursesInput[]
    createMany?: modulesCreateManyCoursesInputEnvelope
    set?: modulesWhereUniqueInput | modulesWhereUniqueInput[]
    disconnect?: modulesWhereUniqueInput | modulesWhereUniqueInput[]
    delete?: modulesWhereUniqueInput | modulesWhereUniqueInput[]
    connect?: modulesWhereUniqueInput | modulesWhereUniqueInput[]
    update?: modulesUpdateWithWhereUniqueWithoutCoursesInput | modulesUpdateWithWhereUniqueWithoutCoursesInput[]
    updateMany?: modulesUpdateManyWithWhereWithoutCoursesInput | modulesUpdateManyWithWhereWithoutCoursesInput[]
    deleteMany?: modulesScalarWhereInput | modulesScalarWhereInput[]
  }

  export type progressUncheckedUpdateManyWithoutCoursesNestedInput = {
    create?: XOR<progressCreateWithoutCoursesInput, progressUncheckedCreateWithoutCoursesInput> | progressCreateWithoutCoursesInput[] | progressUncheckedCreateWithoutCoursesInput[]
    connectOrCreate?: progressCreateOrConnectWithoutCoursesInput | progressCreateOrConnectWithoutCoursesInput[]
    upsert?: progressUpsertWithWhereUniqueWithoutCoursesInput | progressUpsertWithWhereUniqueWithoutCoursesInput[]
    createMany?: progressCreateManyCoursesInputEnvelope
    set?: progressWhereUniqueInput | progressWhereUniqueInput[]
    disconnect?: progressWhereUniqueInput | progressWhereUniqueInput[]
    delete?: progressWhereUniqueInput | progressWhereUniqueInput[]
    connect?: progressWhereUniqueInput | progressWhereUniqueInput[]
    update?: progressUpdateWithWhereUniqueWithoutCoursesInput | progressUpdateWithWhereUniqueWithoutCoursesInput[]
    updateMany?: progressUpdateManyWithWhereWithoutCoursesInput | progressUpdateManyWithWhereWithoutCoursesInput[]
    deleteMany?: progressScalarWhereInput | progressScalarWhereInput[]
  }

  export type coursesCreateNestedOneWithoutModulesInput = {
    create?: XOR<coursesCreateWithoutModulesInput, coursesUncheckedCreateWithoutModulesInput>
    connectOrCreate?: coursesCreateOrConnectWithoutModulesInput
    connect?: coursesWhereUniqueInput
  }

  export type progressCreateNestedManyWithoutModulesInput = {
    create?: XOR<progressCreateWithoutModulesInput, progressUncheckedCreateWithoutModulesInput> | progressCreateWithoutModulesInput[] | progressUncheckedCreateWithoutModulesInput[]
    connectOrCreate?: progressCreateOrConnectWithoutModulesInput | progressCreateOrConnectWithoutModulesInput[]
    createMany?: progressCreateManyModulesInputEnvelope
    connect?: progressWhereUniqueInput | progressWhereUniqueInput[]
  }

  export type progressUncheckedCreateNestedManyWithoutModulesInput = {
    create?: XOR<progressCreateWithoutModulesInput, progressUncheckedCreateWithoutModulesInput> | progressCreateWithoutModulesInput[] | progressUncheckedCreateWithoutModulesInput[]
    connectOrCreate?: progressCreateOrConnectWithoutModulesInput | progressCreateOrConnectWithoutModulesInput[]
    createMany?: progressCreateManyModulesInputEnvelope
    connect?: progressWhereUniqueInput | progressWhereUniqueInput[]
  }

  export type coursesUpdateOneWithoutModulesNestedInput = {
    create?: XOR<coursesCreateWithoutModulesInput, coursesUncheckedCreateWithoutModulesInput>
    connectOrCreate?: coursesCreateOrConnectWithoutModulesInput
    upsert?: coursesUpsertWithoutModulesInput
    disconnect?: coursesWhereInput | boolean
    delete?: coursesWhereInput | boolean
    connect?: coursesWhereUniqueInput
    update?: XOR<XOR<coursesUpdateToOneWithWhereWithoutModulesInput, coursesUpdateWithoutModulesInput>, coursesUncheckedUpdateWithoutModulesInput>
  }

  export type progressUpdateManyWithoutModulesNestedInput = {
    create?: XOR<progressCreateWithoutModulesInput, progressUncheckedCreateWithoutModulesInput> | progressCreateWithoutModulesInput[] | progressUncheckedCreateWithoutModulesInput[]
    connectOrCreate?: progressCreateOrConnectWithoutModulesInput | progressCreateOrConnectWithoutModulesInput[]
    upsert?: progressUpsertWithWhereUniqueWithoutModulesInput | progressUpsertWithWhereUniqueWithoutModulesInput[]
    createMany?: progressCreateManyModulesInputEnvelope
    set?: progressWhereUniqueInput | progressWhereUniqueInput[]
    disconnect?: progressWhereUniqueInput | progressWhereUniqueInput[]
    delete?: progressWhereUniqueInput | progressWhereUniqueInput[]
    connect?: progressWhereUniqueInput | progressWhereUniqueInput[]
    update?: progressUpdateWithWhereUniqueWithoutModulesInput | progressUpdateWithWhereUniqueWithoutModulesInput[]
    updateMany?: progressUpdateManyWithWhereWithoutModulesInput | progressUpdateManyWithWhereWithoutModulesInput[]
    deleteMany?: progressScalarWhereInput | progressScalarWhereInput[]
  }

  export type progressUncheckedUpdateManyWithoutModulesNestedInput = {
    create?: XOR<progressCreateWithoutModulesInput, progressUncheckedCreateWithoutModulesInput> | progressCreateWithoutModulesInput[] | progressUncheckedCreateWithoutModulesInput[]
    connectOrCreate?: progressCreateOrConnectWithoutModulesInput | progressCreateOrConnectWithoutModulesInput[]
    upsert?: progressUpsertWithWhereUniqueWithoutModulesInput | progressUpsertWithWhereUniqueWithoutModulesInput[]
    createMany?: progressCreateManyModulesInputEnvelope
    set?: progressWhereUniqueInput | progressWhereUniqueInput[]
    disconnect?: progressWhereUniqueInput | progressWhereUniqueInput[]
    delete?: progressWhereUniqueInput | progressWhereUniqueInput[]
    connect?: progressWhereUniqueInput | progressWhereUniqueInput[]
    update?: progressUpdateWithWhereUniqueWithoutModulesInput | progressUpdateWithWhereUniqueWithoutModulesInput[]
    updateMany?: progressUpdateManyWithWhereWithoutModulesInput | progressUpdateManyWithWhereWithoutModulesInput[]
    deleteMany?: progressScalarWhereInput | progressScalarWhereInput[]
  }

  export type coursesCreateNestedOneWithoutProgressInput = {
    create?: XOR<coursesCreateWithoutProgressInput, coursesUncheckedCreateWithoutProgressInput>
    connectOrCreate?: coursesCreateOrConnectWithoutProgressInput
    connect?: coursesWhereUniqueInput
  }

  export type modulesCreateNestedOneWithoutProgressInput = {
    create?: XOR<modulesCreateWithoutProgressInput, modulesUncheckedCreateWithoutProgressInput>
    connectOrCreate?: modulesCreateOrConnectWithoutProgressInput
    connect?: modulesWhereUniqueInput
  }

  export type usersCreateNestedOneWithoutProgressInput = {
    create?: XOR<usersCreateWithoutProgressInput, usersUncheckedCreateWithoutProgressInput>
    connectOrCreate?: usersCreateOrConnectWithoutProgressInput
    connect?: usersWhereUniqueInput
  }

  export type coursesUpdateOneWithoutProgressNestedInput = {
    create?: XOR<coursesCreateWithoutProgressInput, coursesUncheckedCreateWithoutProgressInput>
    connectOrCreate?: coursesCreateOrConnectWithoutProgressInput
    upsert?: coursesUpsertWithoutProgressInput
    disconnect?: coursesWhereInput | boolean
    delete?: coursesWhereInput | boolean
    connect?: coursesWhereUniqueInput
    update?: XOR<XOR<coursesUpdateToOneWithWhereWithoutProgressInput, coursesUpdateWithoutProgressInput>, coursesUncheckedUpdateWithoutProgressInput>
  }

  export type modulesUpdateOneWithoutProgressNestedInput = {
    create?: XOR<modulesCreateWithoutProgressInput, modulesUncheckedCreateWithoutProgressInput>
    connectOrCreate?: modulesCreateOrConnectWithoutProgressInput
    upsert?: modulesUpsertWithoutProgressInput
    disconnect?: modulesWhereInput | boolean
    delete?: modulesWhereInput | boolean
    connect?: modulesWhereUniqueInput
    update?: XOR<XOR<modulesUpdateToOneWithWhereWithoutProgressInput, modulesUpdateWithoutProgressInput>, modulesUncheckedUpdateWithoutProgressInput>
  }

  export type usersUpdateOneWithoutProgressNestedInput = {
    create?: XOR<usersCreateWithoutProgressInput, usersUncheckedCreateWithoutProgressInput>
    connectOrCreate?: usersCreateOrConnectWithoutProgressInput
    upsert?: usersUpsertWithoutProgressInput
    disconnect?: usersWhereInput | boolean
    delete?: usersWhereInput | boolean
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutProgressInput, usersUpdateWithoutProgressInput>, usersUncheckedUpdateWithoutProgressInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type course_traineesCreateWithoutUsersInput = {
    courses: coursesCreateNestedOneWithoutCourse_traineesInput
  }

  export type course_traineesUncheckedCreateWithoutUsersInput = {
    course_id: number
  }

  export type course_traineesCreateOrConnectWithoutUsersInput = {
    where: course_traineesWhereUniqueInput
    create: XOR<course_traineesCreateWithoutUsersInput, course_traineesUncheckedCreateWithoutUsersInput>
  }

  export type course_traineesCreateManyUsersInputEnvelope = {
    data: course_traineesCreateManyUsersInput | course_traineesCreateManyUsersInput[]
    skipDuplicates?: boolean
  }

  export type coursesCreateWithoutUsersInput = {
    title: string
    description?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    course_trainees?: course_traineesCreateNestedManyWithoutCoursesInput
    modules?: modulesCreateNestedManyWithoutCoursesInput
    progress?: progressCreateNestedManyWithoutCoursesInput
  }

  export type coursesUncheckedCreateWithoutUsersInput = {
    id?: number
    title: string
    description?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    course_trainees?: course_traineesUncheckedCreateNestedManyWithoutCoursesInput
    modules?: modulesUncheckedCreateNestedManyWithoutCoursesInput
    progress?: progressUncheckedCreateNestedManyWithoutCoursesInput
  }

  export type coursesCreateOrConnectWithoutUsersInput = {
    where: coursesWhereUniqueInput
    create: XOR<coursesCreateWithoutUsersInput, coursesUncheckedCreateWithoutUsersInput>
  }

  export type coursesCreateManyUsersInputEnvelope = {
    data: coursesCreateManyUsersInput | coursesCreateManyUsersInput[]
    skipDuplicates?: boolean
  }

  export type progressCreateWithoutUsersInput = {
    status?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    courses?: coursesCreateNestedOneWithoutProgressInput
    modules?: modulesCreateNestedOneWithoutProgressInput
  }

  export type progressUncheckedCreateWithoutUsersInput = {
    id?: number
    course_id?: number | null
    module_id?: number | null
    status?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type progressCreateOrConnectWithoutUsersInput = {
    where: progressWhereUniqueInput
    create: XOR<progressCreateWithoutUsersInput, progressUncheckedCreateWithoutUsersInput>
  }

  export type progressCreateManyUsersInputEnvelope = {
    data: progressCreateManyUsersInput | progressCreateManyUsersInput[]
    skipDuplicates?: boolean
  }

  export type course_traineesUpsertWithWhereUniqueWithoutUsersInput = {
    where: course_traineesWhereUniqueInput
    update: XOR<course_traineesUpdateWithoutUsersInput, course_traineesUncheckedUpdateWithoutUsersInput>
    create: XOR<course_traineesCreateWithoutUsersInput, course_traineesUncheckedCreateWithoutUsersInput>
  }

  export type course_traineesUpdateWithWhereUniqueWithoutUsersInput = {
    where: course_traineesWhereUniqueInput
    data: XOR<course_traineesUpdateWithoutUsersInput, course_traineesUncheckedUpdateWithoutUsersInput>
  }

  export type course_traineesUpdateManyWithWhereWithoutUsersInput = {
    where: course_traineesScalarWhereInput
    data: XOR<course_traineesUpdateManyMutationInput, course_traineesUncheckedUpdateManyWithoutUsersInput>
  }

  export type course_traineesScalarWhereInput = {
    AND?: course_traineesScalarWhereInput | course_traineesScalarWhereInput[]
    OR?: course_traineesScalarWhereInput[]
    NOT?: course_traineesScalarWhereInput | course_traineesScalarWhereInput[]
    course_id?: IntFilter<"course_trainees"> | number
    trainee_id?: IntFilter<"course_trainees"> | number
  }

  export type coursesUpsertWithWhereUniqueWithoutUsersInput = {
    where: coursesWhereUniqueInput
    update: XOR<coursesUpdateWithoutUsersInput, coursesUncheckedUpdateWithoutUsersInput>
    create: XOR<coursesCreateWithoutUsersInput, coursesUncheckedCreateWithoutUsersInput>
  }

  export type coursesUpdateWithWhereUniqueWithoutUsersInput = {
    where: coursesWhereUniqueInput
    data: XOR<coursesUpdateWithoutUsersInput, coursesUncheckedUpdateWithoutUsersInput>
  }

  export type coursesUpdateManyWithWhereWithoutUsersInput = {
    where: coursesScalarWhereInput
    data: XOR<coursesUpdateManyMutationInput, coursesUncheckedUpdateManyWithoutUsersInput>
  }

  export type coursesScalarWhereInput = {
    AND?: coursesScalarWhereInput | coursesScalarWhereInput[]
    OR?: coursesScalarWhereInput[]
    NOT?: coursesScalarWhereInput | coursesScalarWhereInput[]
    id?: IntFilter<"courses"> | number
    title?: StringFilter<"courses"> | string
    description?: StringNullableFilter<"courses"> | string | null
    trainer_id?: IntNullableFilter<"courses"> | number | null
    created_at?: DateTimeNullableFilter<"courses"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"courses"> | Date | string | null
  }

  export type progressUpsertWithWhereUniqueWithoutUsersInput = {
    where: progressWhereUniqueInput
    update: XOR<progressUpdateWithoutUsersInput, progressUncheckedUpdateWithoutUsersInput>
    create: XOR<progressCreateWithoutUsersInput, progressUncheckedCreateWithoutUsersInput>
  }

  export type progressUpdateWithWhereUniqueWithoutUsersInput = {
    where: progressWhereUniqueInput
    data: XOR<progressUpdateWithoutUsersInput, progressUncheckedUpdateWithoutUsersInput>
  }

  export type progressUpdateManyWithWhereWithoutUsersInput = {
    where: progressScalarWhereInput
    data: XOR<progressUpdateManyMutationInput, progressUncheckedUpdateManyWithoutUsersInput>
  }

  export type progressScalarWhereInput = {
    AND?: progressScalarWhereInput | progressScalarWhereInput[]
    OR?: progressScalarWhereInput[]
    NOT?: progressScalarWhereInput | progressScalarWhereInput[]
    id?: IntFilter<"progress"> | number
    trainee_id?: IntNullableFilter<"progress"> | number | null
    course_id?: IntNullableFilter<"progress"> | number | null
    module_id?: IntNullableFilter<"progress"> | number | null
    status?: StringNullableFilter<"progress"> | string | null
    created_at?: DateTimeNullableFilter<"progress"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"progress"> | Date | string | null
  }

  export type coursesCreateWithoutCourse_traineesInput = {
    title: string
    description?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    users?: usersCreateNestedOneWithoutCoursesInput
    modules?: modulesCreateNestedManyWithoutCoursesInput
    progress?: progressCreateNestedManyWithoutCoursesInput
  }

  export type coursesUncheckedCreateWithoutCourse_traineesInput = {
    id?: number
    title: string
    description?: string | null
    trainer_id?: number | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    modules?: modulesUncheckedCreateNestedManyWithoutCoursesInput
    progress?: progressUncheckedCreateNestedManyWithoutCoursesInput
  }

  export type coursesCreateOrConnectWithoutCourse_traineesInput = {
    where: coursesWhereUniqueInput
    create: XOR<coursesCreateWithoutCourse_traineesInput, coursesUncheckedCreateWithoutCourse_traineesInput>
  }

  export type usersCreateWithoutCourse_traineesInput = {
    email: string
    password: string
    role: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    courses?: coursesCreateNestedManyWithoutUsersInput
    progress?: progressCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateWithoutCourse_traineesInput = {
    id?: number
    email: string
    password: string
    role: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    courses?: coursesUncheckedCreateNestedManyWithoutUsersInput
    progress?: progressUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersCreateOrConnectWithoutCourse_traineesInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutCourse_traineesInput, usersUncheckedCreateWithoutCourse_traineesInput>
  }

  export type coursesUpsertWithoutCourse_traineesInput = {
    update: XOR<coursesUpdateWithoutCourse_traineesInput, coursesUncheckedUpdateWithoutCourse_traineesInput>
    create: XOR<coursesCreateWithoutCourse_traineesInput, coursesUncheckedCreateWithoutCourse_traineesInput>
    where?: coursesWhereInput
  }

  export type coursesUpdateToOneWithWhereWithoutCourse_traineesInput = {
    where?: coursesWhereInput
    data: XOR<coursesUpdateWithoutCourse_traineesInput, coursesUncheckedUpdateWithoutCourse_traineesInput>
  }

  export type coursesUpdateWithoutCourse_traineesInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: usersUpdateOneWithoutCoursesNestedInput
    modules?: modulesUpdateManyWithoutCoursesNestedInput
    progress?: progressUpdateManyWithoutCoursesNestedInput
  }

  export type coursesUncheckedUpdateWithoutCourse_traineesInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    trainer_id?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    modules?: modulesUncheckedUpdateManyWithoutCoursesNestedInput
    progress?: progressUncheckedUpdateManyWithoutCoursesNestedInput
  }

  export type usersUpsertWithoutCourse_traineesInput = {
    update: XOR<usersUpdateWithoutCourse_traineesInput, usersUncheckedUpdateWithoutCourse_traineesInput>
    create: XOR<usersCreateWithoutCourse_traineesInput, usersUncheckedCreateWithoutCourse_traineesInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutCourse_traineesInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutCourse_traineesInput, usersUncheckedUpdateWithoutCourse_traineesInput>
  }

  export type usersUpdateWithoutCourse_traineesInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    courses?: coursesUpdateManyWithoutUsersNestedInput
    progress?: progressUpdateManyWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateWithoutCourse_traineesInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    courses?: coursesUncheckedUpdateManyWithoutUsersNestedInput
    progress?: progressUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type course_traineesCreateWithoutCoursesInput = {
    users: usersCreateNestedOneWithoutCourse_traineesInput
  }

  export type course_traineesUncheckedCreateWithoutCoursesInput = {
    trainee_id: number
  }

  export type course_traineesCreateOrConnectWithoutCoursesInput = {
    where: course_traineesWhereUniqueInput
    create: XOR<course_traineesCreateWithoutCoursesInput, course_traineesUncheckedCreateWithoutCoursesInput>
  }

  export type course_traineesCreateManyCoursesInputEnvelope = {
    data: course_traineesCreateManyCoursesInput | course_traineesCreateManyCoursesInput[]
    skipDuplicates?: boolean
  }

  export type usersCreateWithoutCoursesInput = {
    email: string
    password: string
    role: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    course_trainees?: course_traineesCreateNestedManyWithoutUsersInput
    progress?: progressCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateWithoutCoursesInput = {
    id?: number
    email: string
    password: string
    role: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    course_trainees?: course_traineesUncheckedCreateNestedManyWithoutUsersInput
    progress?: progressUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersCreateOrConnectWithoutCoursesInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutCoursesInput, usersUncheckedCreateWithoutCoursesInput>
  }

  export type modulesCreateWithoutCoursesInput = {
    title: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    progress?: progressCreateNestedManyWithoutModulesInput
  }

  export type modulesUncheckedCreateWithoutCoursesInput = {
    id?: number
    title: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    progress?: progressUncheckedCreateNestedManyWithoutModulesInput
  }

  export type modulesCreateOrConnectWithoutCoursesInput = {
    where: modulesWhereUniqueInput
    create: XOR<modulesCreateWithoutCoursesInput, modulesUncheckedCreateWithoutCoursesInput>
  }

  export type modulesCreateManyCoursesInputEnvelope = {
    data: modulesCreateManyCoursesInput | modulesCreateManyCoursesInput[]
    skipDuplicates?: boolean
  }

  export type progressCreateWithoutCoursesInput = {
    status?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    modules?: modulesCreateNestedOneWithoutProgressInput
    users?: usersCreateNestedOneWithoutProgressInput
  }

  export type progressUncheckedCreateWithoutCoursesInput = {
    id?: number
    trainee_id?: number | null
    module_id?: number | null
    status?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type progressCreateOrConnectWithoutCoursesInput = {
    where: progressWhereUniqueInput
    create: XOR<progressCreateWithoutCoursesInput, progressUncheckedCreateWithoutCoursesInput>
  }

  export type progressCreateManyCoursesInputEnvelope = {
    data: progressCreateManyCoursesInput | progressCreateManyCoursesInput[]
    skipDuplicates?: boolean
  }

  export type course_traineesUpsertWithWhereUniqueWithoutCoursesInput = {
    where: course_traineesWhereUniqueInput
    update: XOR<course_traineesUpdateWithoutCoursesInput, course_traineesUncheckedUpdateWithoutCoursesInput>
    create: XOR<course_traineesCreateWithoutCoursesInput, course_traineesUncheckedCreateWithoutCoursesInput>
  }

  export type course_traineesUpdateWithWhereUniqueWithoutCoursesInput = {
    where: course_traineesWhereUniqueInput
    data: XOR<course_traineesUpdateWithoutCoursesInput, course_traineesUncheckedUpdateWithoutCoursesInput>
  }

  export type course_traineesUpdateManyWithWhereWithoutCoursesInput = {
    where: course_traineesScalarWhereInput
    data: XOR<course_traineesUpdateManyMutationInput, course_traineesUncheckedUpdateManyWithoutCoursesInput>
  }

  export type usersUpsertWithoutCoursesInput = {
    update: XOR<usersUpdateWithoutCoursesInput, usersUncheckedUpdateWithoutCoursesInput>
    create: XOR<usersCreateWithoutCoursesInput, usersUncheckedCreateWithoutCoursesInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutCoursesInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutCoursesInput, usersUncheckedUpdateWithoutCoursesInput>
  }

  export type usersUpdateWithoutCoursesInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    course_trainees?: course_traineesUpdateManyWithoutUsersNestedInput
    progress?: progressUpdateManyWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateWithoutCoursesInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    course_trainees?: course_traineesUncheckedUpdateManyWithoutUsersNestedInput
    progress?: progressUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type modulesUpsertWithWhereUniqueWithoutCoursesInput = {
    where: modulesWhereUniqueInput
    update: XOR<modulesUpdateWithoutCoursesInput, modulesUncheckedUpdateWithoutCoursesInput>
    create: XOR<modulesCreateWithoutCoursesInput, modulesUncheckedCreateWithoutCoursesInput>
  }

  export type modulesUpdateWithWhereUniqueWithoutCoursesInput = {
    where: modulesWhereUniqueInput
    data: XOR<modulesUpdateWithoutCoursesInput, modulesUncheckedUpdateWithoutCoursesInput>
  }

  export type modulesUpdateManyWithWhereWithoutCoursesInput = {
    where: modulesScalarWhereInput
    data: XOR<modulesUpdateManyMutationInput, modulesUncheckedUpdateManyWithoutCoursesInput>
  }

  export type modulesScalarWhereInput = {
    AND?: modulesScalarWhereInput | modulesScalarWhereInput[]
    OR?: modulesScalarWhereInput[]
    NOT?: modulesScalarWhereInput | modulesScalarWhereInput[]
    id?: IntFilter<"modules"> | number
    title?: StringFilter<"modules"> | string
    course_id?: IntNullableFilter<"modules"> | number | null
    created_at?: DateTimeNullableFilter<"modules"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"modules"> | Date | string | null
  }

  export type progressUpsertWithWhereUniqueWithoutCoursesInput = {
    where: progressWhereUniqueInput
    update: XOR<progressUpdateWithoutCoursesInput, progressUncheckedUpdateWithoutCoursesInput>
    create: XOR<progressCreateWithoutCoursesInput, progressUncheckedCreateWithoutCoursesInput>
  }

  export type progressUpdateWithWhereUniqueWithoutCoursesInput = {
    where: progressWhereUniqueInput
    data: XOR<progressUpdateWithoutCoursesInput, progressUncheckedUpdateWithoutCoursesInput>
  }

  export type progressUpdateManyWithWhereWithoutCoursesInput = {
    where: progressScalarWhereInput
    data: XOR<progressUpdateManyMutationInput, progressUncheckedUpdateManyWithoutCoursesInput>
  }

  export type coursesCreateWithoutModulesInput = {
    title: string
    description?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    course_trainees?: course_traineesCreateNestedManyWithoutCoursesInput
    users?: usersCreateNestedOneWithoutCoursesInput
    progress?: progressCreateNestedManyWithoutCoursesInput
  }

  export type coursesUncheckedCreateWithoutModulesInput = {
    id?: number
    title: string
    description?: string | null
    trainer_id?: number | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    course_trainees?: course_traineesUncheckedCreateNestedManyWithoutCoursesInput
    progress?: progressUncheckedCreateNestedManyWithoutCoursesInput
  }

  export type coursesCreateOrConnectWithoutModulesInput = {
    where: coursesWhereUniqueInput
    create: XOR<coursesCreateWithoutModulesInput, coursesUncheckedCreateWithoutModulesInput>
  }

  export type progressCreateWithoutModulesInput = {
    status?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    courses?: coursesCreateNestedOneWithoutProgressInput
    users?: usersCreateNestedOneWithoutProgressInput
  }

  export type progressUncheckedCreateWithoutModulesInput = {
    id?: number
    trainee_id?: number | null
    course_id?: number | null
    status?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type progressCreateOrConnectWithoutModulesInput = {
    where: progressWhereUniqueInput
    create: XOR<progressCreateWithoutModulesInput, progressUncheckedCreateWithoutModulesInput>
  }

  export type progressCreateManyModulesInputEnvelope = {
    data: progressCreateManyModulesInput | progressCreateManyModulesInput[]
    skipDuplicates?: boolean
  }

  export type coursesUpsertWithoutModulesInput = {
    update: XOR<coursesUpdateWithoutModulesInput, coursesUncheckedUpdateWithoutModulesInput>
    create: XOR<coursesCreateWithoutModulesInput, coursesUncheckedCreateWithoutModulesInput>
    where?: coursesWhereInput
  }

  export type coursesUpdateToOneWithWhereWithoutModulesInput = {
    where?: coursesWhereInput
    data: XOR<coursesUpdateWithoutModulesInput, coursesUncheckedUpdateWithoutModulesInput>
  }

  export type coursesUpdateWithoutModulesInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    course_trainees?: course_traineesUpdateManyWithoutCoursesNestedInput
    users?: usersUpdateOneWithoutCoursesNestedInput
    progress?: progressUpdateManyWithoutCoursesNestedInput
  }

  export type coursesUncheckedUpdateWithoutModulesInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    trainer_id?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    course_trainees?: course_traineesUncheckedUpdateManyWithoutCoursesNestedInput
    progress?: progressUncheckedUpdateManyWithoutCoursesNestedInput
  }

  export type progressUpsertWithWhereUniqueWithoutModulesInput = {
    where: progressWhereUniqueInput
    update: XOR<progressUpdateWithoutModulesInput, progressUncheckedUpdateWithoutModulesInput>
    create: XOR<progressCreateWithoutModulesInput, progressUncheckedCreateWithoutModulesInput>
  }

  export type progressUpdateWithWhereUniqueWithoutModulesInput = {
    where: progressWhereUniqueInput
    data: XOR<progressUpdateWithoutModulesInput, progressUncheckedUpdateWithoutModulesInput>
  }

  export type progressUpdateManyWithWhereWithoutModulesInput = {
    where: progressScalarWhereInput
    data: XOR<progressUpdateManyMutationInput, progressUncheckedUpdateManyWithoutModulesInput>
  }

  export type coursesCreateWithoutProgressInput = {
    title: string
    description?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    course_trainees?: course_traineesCreateNestedManyWithoutCoursesInput
    users?: usersCreateNestedOneWithoutCoursesInput
    modules?: modulesCreateNestedManyWithoutCoursesInput
  }

  export type coursesUncheckedCreateWithoutProgressInput = {
    id?: number
    title: string
    description?: string | null
    trainer_id?: number | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    course_trainees?: course_traineesUncheckedCreateNestedManyWithoutCoursesInput
    modules?: modulesUncheckedCreateNestedManyWithoutCoursesInput
  }

  export type coursesCreateOrConnectWithoutProgressInput = {
    where: coursesWhereUniqueInput
    create: XOR<coursesCreateWithoutProgressInput, coursesUncheckedCreateWithoutProgressInput>
  }

  export type modulesCreateWithoutProgressInput = {
    title: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    courses?: coursesCreateNestedOneWithoutModulesInput
  }

  export type modulesUncheckedCreateWithoutProgressInput = {
    id?: number
    title: string
    course_id?: number | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type modulesCreateOrConnectWithoutProgressInput = {
    where: modulesWhereUniqueInput
    create: XOR<modulesCreateWithoutProgressInput, modulesUncheckedCreateWithoutProgressInput>
  }

  export type usersCreateWithoutProgressInput = {
    email: string
    password: string
    role: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    course_trainees?: course_traineesCreateNestedManyWithoutUsersInput
    courses?: coursesCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateWithoutProgressInput = {
    id?: number
    email: string
    password: string
    role: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    course_trainees?: course_traineesUncheckedCreateNestedManyWithoutUsersInput
    courses?: coursesUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersCreateOrConnectWithoutProgressInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutProgressInput, usersUncheckedCreateWithoutProgressInput>
  }

  export type coursesUpsertWithoutProgressInput = {
    update: XOR<coursesUpdateWithoutProgressInput, coursesUncheckedUpdateWithoutProgressInput>
    create: XOR<coursesCreateWithoutProgressInput, coursesUncheckedCreateWithoutProgressInput>
    where?: coursesWhereInput
  }

  export type coursesUpdateToOneWithWhereWithoutProgressInput = {
    where?: coursesWhereInput
    data: XOR<coursesUpdateWithoutProgressInput, coursesUncheckedUpdateWithoutProgressInput>
  }

  export type coursesUpdateWithoutProgressInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    course_trainees?: course_traineesUpdateManyWithoutCoursesNestedInput
    users?: usersUpdateOneWithoutCoursesNestedInput
    modules?: modulesUpdateManyWithoutCoursesNestedInput
  }

  export type coursesUncheckedUpdateWithoutProgressInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    trainer_id?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    course_trainees?: course_traineesUncheckedUpdateManyWithoutCoursesNestedInput
    modules?: modulesUncheckedUpdateManyWithoutCoursesNestedInput
  }

  export type modulesUpsertWithoutProgressInput = {
    update: XOR<modulesUpdateWithoutProgressInput, modulesUncheckedUpdateWithoutProgressInput>
    create: XOR<modulesCreateWithoutProgressInput, modulesUncheckedCreateWithoutProgressInput>
    where?: modulesWhereInput
  }

  export type modulesUpdateToOneWithWhereWithoutProgressInput = {
    where?: modulesWhereInput
    data: XOR<modulesUpdateWithoutProgressInput, modulesUncheckedUpdateWithoutProgressInput>
  }

  export type modulesUpdateWithoutProgressInput = {
    title?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    courses?: coursesUpdateOneWithoutModulesNestedInput
  }

  export type modulesUncheckedUpdateWithoutProgressInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    course_id?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type usersUpsertWithoutProgressInput = {
    update: XOR<usersUpdateWithoutProgressInput, usersUncheckedUpdateWithoutProgressInput>
    create: XOR<usersCreateWithoutProgressInput, usersUncheckedCreateWithoutProgressInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutProgressInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutProgressInput, usersUncheckedUpdateWithoutProgressInput>
  }

  export type usersUpdateWithoutProgressInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    course_trainees?: course_traineesUpdateManyWithoutUsersNestedInput
    courses?: coursesUpdateManyWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateWithoutProgressInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    course_trainees?: course_traineesUncheckedUpdateManyWithoutUsersNestedInput
    courses?: coursesUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type course_traineesCreateManyUsersInput = {
    course_id: number
  }

  export type coursesCreateManyUsersInput = {
    id?: number
    title: string
    description?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type progressCreateManyUsersInput = {
    id?: number
    course_id?: number | null
    module_id?: number | null
    status?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type course_traineesUpdateWithoutUsersInput = {
    courses?: coursesUpdateOneRequiredWithoutCourse_traineesNestedInput
  }

  export type course_traineesUncheckedUpdateWithoutUsersInput = {
    course_id?: IntFieldUpdateOperationsInput | number
  }

  export type course_traineesUncheckedUpdateManyWithoutUsersInput = {
    course_id?: IntFieldUpdateOperationsInput | number
  }

  export type coursesUpdateWithoutUsersInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    course_trainees?: course_traineesUpdateManyWithoutCoursesNestedInput
    modules?: modulesUpdateManyWithoutCoursesNestedInput
    progress?: progressUpdateManyWithoutCoursesNestedInput
  }

  export type coursesUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    course_trainees?: course_traineesUncheckedUpdateManyWithoutCoursesNestedInput
    modules?: modulesUncheckedUpdateManyWithoutCoursesNestedInput
    progress?: progressUncheckedUpdateManyWithoutCoursesNestedInput
  }

  export type coursesUncheckedUpdateManyWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type progressUpdateWithoutUsersInput = {
    status?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    courses?: coursesUpdateOneWithoutProgressNestedInput
    modules?: modulesUpdateOneWithoutProgressNestedInput
  }

  export type progressUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    course_id?: NullableIntFieldUpdateOperationsInput | number | null
    module_id?: NullableIntFieldUpdateOperationsInput | number | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type progressUncheckedUpdateManyWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    course_id?: NullableIntFieldUpdateOperationsInput | number | null
    module_id?: NullableIntFieldUpdateOperationsInput | number | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type course_traineesCreateManyCoursesInput = {
    trainee_id: number
  }

  export type modulesCreateManyCoursesInput = {
    id?: number
    title: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type progressCreateManyCoursesInput = {
    id?: number
    trainee_id?: number | null
    module_id?: number | null
    status?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type course_traineesUpdateWithoutCoursesInput = {
    users?: usersUpdateOneRequiredWithoutCourse_traineesNestedInput
  }

  export type course_traineesUncheckedUpdateWithoutCoursesInput = {
    trainee_id?: IntFieldUpdateOperationsInput | number
  }

  export type course_traineesUncheckedUpdateManyWithoutCoursesInput = {
    trainee_id?: IntFieldUpdateOperationsInput | number
  }

  export type modulesUpdateWithoutCoursesInput = {
    title?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    progress?: progressUpdateManyWithoutModulesNestedInput
  }

  export type modulesUncheckedUpdateWithoutCoursesInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    progress?: progressUncheckedUpdateManyWithoutModulesNestedInput
  }

  export type modulesUncheckedUpdateManyWithoutCoursesInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type progressUpdateWithoutCoursesInput = {
    status?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    modules?: modulesUpdateOneWithoutProgressNestedInput
    users?: usersUpdateOneWithoutProgressNestedInput
  }

  export type progressUncheckedUpdateWithoutCoursesInput = {
    id?: IntFieldUpdateOperationsInput | number
    trainee_id?: NullableIntFieldUpdateOperationsInput | number | null
    module_id?: NullableIntFieldUpdateOperationsInput | number | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type progressUncheckedUpdateManyWithoutCoursesInput = {
    id?: IntFieldUpdateOperationsInput | number
    trainee_id?: NullableIntFieldUpdateOperationsInput | number | null
    module_id?: NullableIntFieldUpdateOperationsInput | number | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type progressCreateManyModulesInput = {
    id?: number
    trainee_id?: number | null
    course_id?: number | null
    status?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type progressUpdateWithoutModulesInput = {
    status?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    courses?: coursesUpdateOneWithoutProgressNestedInput
    users?: usersUpdateOneWithoutProgressNestedInput
  }

  export type progressUncheckedUpdateWithoutModulesInput = {
    id?: IntFieldUpdateOperationsInput | number
    trainee_id?: NullableIntFieldUpdateOperationsInput | number | null
    course_id?: NullableIntFieldUpdateOperationsInput | number | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type progressUncheckedUpdateManyWithoutModulesInput = {
    id?: IntFieldUpdateOperationsInput | number
    trainee_id?: NullableIntFieldUpdateOperationsInput | number | null
    course_id?: NullableIntFieldUpdateOperationsInput | number | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UsersCountOutputTypeDefaultArgs instead
     */
    export type UsersCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsersCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CoursesCountOutputTypeDefaultArgs instead
     */
    export type CoursesCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CoursesCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ModulesCountOutputTypeDefaultArgs instead
     */
    export type ModulesCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ModulesCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use flyway_schema_historyDefaultArgs instead
     */
    export type flyway_schema_historyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = flyway_schema_historyDefaultArgs<ExtArgs>
    /**
     * @deprecated Use usersDefaultArgs instead
     */
    export type usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = usersDefaultArgs<ExtArgs>
    /**
     * @deprecated Use course_traineesDefaultArgs instead
     */
    export type course_traineesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = course_traineesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use coursesDefaultArgs instead
     */
    export type coursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = coursesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use modulesDefaultArgs instead
     */
    export type modulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = modulesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use progressDefaultArgs instead
     */
    export type progressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = progressDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}